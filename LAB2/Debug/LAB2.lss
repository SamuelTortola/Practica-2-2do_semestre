
LAB2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000a5a  00000aee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  0080011c  0080011c  00000b0a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b0a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f44  00000000  00000000  00000c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a4  00000000  00000000  00001b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bbc  00000000  00000000  00002414  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  00002fd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ce  00000000  00000000  0000310c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000469  00000000  00000000  000035da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00003a43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__ctors_end>
   4:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
   8:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
   c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  10:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  14:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  18:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  1c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  20:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  24:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  28:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  2c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  30:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  34:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  38:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  3c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  40:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  44:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  48:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  4c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  50:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  54:	0c 94 c6 04 	jmp	0x98c	; 0x98c <__vector_21>
  58:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  5c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  60:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  64:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  68:	32 02       	muls	r19, r18
  6a:	37 02       	muls	r19, r23
  6c:	3c 02       	muls	r19, r28
  6e:	41 02       	muls	r20, r17
  70:	46 02       	muls	r20, r22
  72:	4b 02       	muls	r20, r27
  74:	50 02       	muls	r21, r16
  76:	55 02       	muls	r21, r21
  78:	5a 02       	muls	r21, r26
  7a:	5f 02       	muls	r21, r31
  7c:	6b 02       	muls	r22, r27
  7e:	70 02       	muls	r23, r16
  80:	75 02       	muls	r23, r21
  82:	7a 02       	muls	r23, r26
  84:	7f 02       	muls	r23, r31
  86:	84 02       	muls	r24, r20
  88:	89 02       	muls	r24, r25
  8a:	8e 02       	muls	r24, r30
  8c:	93 02       	muls	r25, r19
  8e:	98 02       	muls	r25, r24
  90:	a4 02       	muls	r26, r20
  92:	a9 02       	muls	r26, r25
  94:	ae 02       	muls	r26, r30
  96:	b3 02       	muls	r27, r19
  98:	b8 02       	muls	r27, r24
  9a:	bd 02       	muls	r27, r29
  9c:	c2 02       	muls	r28, r18
  9e:	c7 02       	muls	r28, r23
  a0:	cc 02       	muls	r28, r28
  a2:	d1 02       	muls	r29, r17
  a4:	1c 03       	fmul	r17, r20
  a6:	21 03       	mulsu	r18, r17
  a8:	26 03       	mulsu	r18, r22
  aa:	2b 03       	fmul	r18, r19
  ac:	30 03       	mulsu	r19, r16
  ae:	35 03       	mulsu	r19, r21
  b0:	3a 03       	fmul	r19, r18
  b2:	3f 03       	fmul	r19, r23
  b4:	44 03       	mulsu	r20, r20
  b6:	49 03       	fmul	r20, r17
  b8:	55 03       	mulsu	r21, r21
  ba:	5a 03       	fmul	r21, r18
  bc:	5f 03       	fmul	r21, r23
  be:	64 03       	mulsu	r22, r20
  c0:	69 03       	fmul	r22, r17
  c2:	6e 03       	fmul	r22, r22
  c4:	73 03       	mulsu	r23, r19
  c6:	78 03       	fmul	r23, r16
  c8:	7d 03       	fmul	r23, r21
  ca:	82 03       	fmuls	r16, r18
  cc:	8e 03       	fmulsu	r16, r22
  ce:	93 03       	fmuls	r17, r19
  d0:	98 03       	fmulsu	r17, r16
  d2:	9d 03       	fmulsu	r17, r21
  d4:	a2 03       	fmuls	r18, r18
  d6:	a7 03       	fmuls	r18, r23
  d8:	ac 03       	fmulsu	r18, r20
  da:	b1 03       	fmuls	r19, r17
  dc:	b6 03       	fmuls	r19, r22
  de:	bb 03       	fmulsu	r19, r19
  e0:	17 04       	cpc	r1, r7
  e2:	1c 04       	cpc	r1, r12
  e4:	21 04       	cpc	r2, r1
  e6:	26 04       	cpc	r2, r6
  e8:	2b 04       	cpc	r2, r11
  ea:	30 04       	cpc	r3, r0
  ec:	35 04       	cpc	r3, r5
  ee:	3a 04       	cpc	r3, r10
  f0:	3f 04       	cpc	r3, r15
  f2:	44 04       	cpc	r4, r4
  f4:	50 04       	cpc	r5, r0
  f6:	55 04       	cpc	r5, r5
  f8:	5a 04       	cpc	r5, r10
  fa:	5f 04       	cpc	r5, r15
  fc:	64 04       	cpc	r6, r4
  fe:	69 04       	cpc	r6, r9
 100:	6e 04       	cpc	r6, r14
 102:	73 04       	cpc	r7, r3
 104:	78 04       	cpc	r7, r8
 106:	7d 04       	cpc	r7, r13
 108:	89 04       	cpc	r8, r9
 10a:	8e 04       	cpc	r8, r14
 10c:	93 04       	cpc	r9, r3
 10e:	98 04       	cpc	r9, r8
 110:	9d 04       	cpc	r9, r13
 112:	a2 04       	cpc	r10, r2
 114:	a7 04       	cpc	r10, r7
 116:	ac 04       	cpc	r10, r12
 118:	b1 04       	cpc	r11, r1
 11a:	b6 04       	cpc	r11, r6

0000011c <__ctors_end>:
 11c:	11 24       	eor	r1, r1
 11e:	1f be       	out	0x3f, r1	; 63
 120:	cf ef       	ldi	r28, 0xFF	; 255
 122:	d8 e0       	ldi	r29, 0x08	; 8
 124:	de bf       	out	0x3e, r29	; 62
 126:	cd bf       	out	0x3d, r28	; 61

00000128 <__do_copy_data>:
 128:	11 e0       	ldi	r17, 0x01	; 1
 12a:	a0 e0       	ldi	r26, 0x00	; 0
 12c:	b1 e0       	ldi	r27, 0x01	; 1
 12e:	ea e5       	ldi	r30, 0x5A	; 90
 130:	fa e0       	ldi	r31, 0x0A	; 10
 132:	02 c0       	rjmp	.+4      	; 0x138 <__do_copy_data+0x10>
 134:	05 90       	lpm	r0, Z+
 136:	0d 92       	st	X+, r0
 138:	ac 31       	cpi	r26, 0x1C	; 28
 13a:	b1 07       	cpc	r27, r17
 13c:	d9 f7       	brne	.-10     	; 0x134 <__do_copy_data+0xc>

0000013e <__do_clear_bss>:
 13e:	21 e0       	ldi	r18, 0x01	; 1
 140:	ac e1       	ldi	r26, 0x1C	; 28
 142:	b1 e0       	ldi	r27, 0x01	; 1
 144:	01 c0       	rjmp	.+2      	; 0x148 <.do_clear_bss_start>

00000146 <.do_clear_bss_loop>:
 146:	1d 92       	st	X+, r1

00000148 <.do_clear_bss_start>:
 148:	af 32       	cpi	r26, 0x2F	; 47
 14a:	b2 07       	cpc	r27, r18
 14c:	e1 f7       	brne	.-8      	; 0x146 <.do_clear_bss_loop>
 14e:	0e 94 b4 01 	call	0x368	; 0x368 <main>
 152:	0c 94 2b 05 	jmp	0xa56	; 0xa56 <_exit>

00000156 <__bad_interrupt>:
 156:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000015a <initADC>:
#include "ADC.h"

void initADC(){
	
	ADMUX = 0;
 15a:	ec e7       	ldi	r30, 0x7C	; 124
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	10 82       	st	Z, r1
	DIDR0 |= (1 <<ADC0D);	//desabilitar el A0 como digital
 160:	ae e7       	ldi	r26, 0x7E	; 126
 162:	b0 e0       	ldi	r27, 0x00	; 0
 164:	8c 91       	ld	r24, X
 166:	81 60       	ori	r24, 0x01	; 1
 168:	8c 93       	st	X, r24
	DIDR0 |= (1<<ADC1D);     //desabilitar el A1 como digital
 16a:	8c 91       	ld	r24, X
 16c:	82 60       	ori	r24, 0x02	; 2
 16e:	8c 93       	st	X, r24


	//JUSTIFICACION IZQUIERDA
	ADMUX |= (1<<ADLAR);
 170:	80 81       	ld	r24, Z
 172:	80 62       	ori	r24, 0x20	; 32
 174:	80 83       	st	Z, r24
	//REFERENCIA INTERNA
	ADMUX |= (1<<REFS0);
 176:	80 81       	ld	r24, Z
 178:	80 64       	ori	r24, 0x40	; 64
 17a:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);
 17c:	80 81       	ld	r24, Z
 17e:	8f 77       	andi	r24, 0x7F	; 127
 180:	80 83       	st	Z, r24
	// HABILITAR INTERRUPCION
	ADCSRA |= (1<<ADIE);
 182:	ea e7       	ldi	r30, 0x7A	; 122
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	88 60       	ori	r24, 0x08	; 8
 18a:	80 83       	st	Z, r24
	//PRESCALER 128
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);  //Habilitando prescaler de 16M/128 frecuencia = 125Khz
 18c:	80 81       	ld	r24, Z
 18e:	87 60       	ori	r24, 0x07	; 7
 190:	80 83       	st	Z, r24
	//HABILITAR ADC
	ADCSRA |= (1<<ADEN);
 192:	80 81       	ld	r24, Z
 194:	80 68       	ori	r24, 0x80	; 128
 196:	80 83       	st	Z, r24
 198:	08 95       	ret

0000019a <dato_a_mostrar>:
}


void dato_a_mostrar(char a)
{
	if(a & 1)				//0000 0001, el  a&1 es una operación bitwise, si el primer bit menos signfiativo es 1, la condición es verdadera
 19a:	80 ff       	sbrs	r24, 0
 19c:	04 c0       	rjmp	.+8      	; 0x1a6 <dato_a_mostrar+0xc>
	PORTB |= (1<<3);
 19e:	95 b1       	in	r25, 0x05	; 5
 1a0:	98 60       	ori	r25, 0x08	; 8
 1a2:	95 b9       	out	0x05, r25	; 5
 1a4:	03 c0       	rjmp	.+6      	; 0x1ac <dato_a_mostrar+0x12>
	else
	PORTB &= ~(1<<3);
 1a6:	95 b1       	in	r25, 0x05	; 5
 1a8:	97 7f       	andi	r25, 0xF7	; 247
 1aa:	95 b9       	out	0x05, r25	; 5
	
	if(a & 2)			   //0000 0010, ahora verifica el segundo bit menos significativo, y si es 1, la condición es verdadera
 1ac:	81 ff       	sbrs	r24, 1
 1ae:	04 c0       	rjmp	.+8      	; 0x1b8 <dato_a_mostrar+0x1e>
	PORTB |= (1<<2);
 1b0:	95 b1       	in	r25, 0x05	; 5
 1b2:	94 60       	ori	r25, 0x04	; 4
 1b4:	95 b9       	out	0x05, r25	; 5
 1b6:	03 c0       	rjmp	.+6      	; 0x1be <dato_a_mostrar+0x24>
	else
	PORTB &= ~(1<<2);
 1b8:	95 b1       	in	r25, 0x05	; 5
 1ba:	9b 7f       	andi	r25, 0xFB	; 251
 1bc:	95 b9       	out	0x05, r25	; 5
	
	if(a & 4)				//0000 0100
 1be:	82 ff       	sbrs	r24, 2
 1c0:	04 c0       	rjmp	.+8      	; 0x1ca <dato_a_mostrar+0x30>
	PORTD |= (1<<PORTD2);
 1c2:	9b b1       	in	r25, 0x0b	; 11
 1c4:	94 60       	ori	r25, 0x04	; 4
 1c6:	9b b9       	out	0x0b, r25	; 11
 1c8:	03 c0       	rjmp	.+6      	; 0x1d0 <dato_a_mostrar+0x36>
	else
	PORTD &= ~(1<<PORTD2);
 1ca:	9b b1       	in	r25, 0x0b	; 11
 1cc:	9b 7f       	andi	r25, 0xFB	; 251
 1ce:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 8)				//0000 1000
 1d0:	83 ff       	sbrs	r24, 3
 1d2:	04 c0       	rjmp	.+8      	; 0x1dc <dato_a_mostrar+0x42>
	PORTD |= (1<<PORTD3);
 1d4:	9b b1       	in	r25, 0x0b	; 11
 1d6:	98 60       	ori	r25, 0x08	; 8
 1d8:	9b b9       	out	0x0b, r25	; 11
 1da:	03 c0       	rjmp	.+6      	; 0x1e2 <dato_a_mostrar+0x48>
	else
	PORTD &= ~(1<<PORTD3);
 1dc:	9b b1       	in	r25, 0x0b	; 11
 1de:	97 7f       	andi	r25, 0xF7	; 247
 1e0:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 16)			    //0001 0000
 1e2:	84 ff       	sbrs	r24, 4
 1e4:	04 c0       	rjmp	.+8      	; 0x1ee <dato_a_mostrar+0x54>
	PORTD |= (1<<PORTD4);
 1e6:	9b b1       	in	r25, 0x0b	; 11
 1e8:	90 61       	ori	r25, 0x10	; 16
 1ea:	9b b9       	out	0x0b, r25	; 11
 1ec:	03 c0       	rjmp	.+6      	; 0x1f4 <dato_a_mostrar+0x5a>
	else
	PORTD &= ~(1<<PORTD4);
 1ee:	9b b1       	in	r25, 0x0b	; 11
 1f0:	9f 7e       	andi	r25, 0xEF	; 239
 1f2:	9b b9       	out	0x0b, r25	; 11

	if(a & 32)			    //0010 0000
 1f4:	85 ff       	sbrs	r24, 5
 1f6:	04 c0       	rjmp	.+8      	; 0x200 <dato_a_mostrar+0x66>
	PORTD |= (1<<PORTD5);
 1f8:	9b b1       	in	r25, 0x0b	; 11
 1fa:	90 62       	ori	r25, 0x20	; 32
 1fc:	9b b9       	out	0x0b, r25	; 11
 1fe:	03 c0       	rjmp	.+6      	; 0x206 <dato_a_mostrar+0x6c>
	else
	PORTD &= ~(1<<PORTD5);
 200:	9b b1       	in	r25, 0x0b	; 11
 202:	9f 7d       	andi	r25, 0xDF	; 223
 204:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 64)			   //0100 0000
 206:	86 ff       	sbrs	r24, 6
 208:	04 c0       	rjmp	.+8      	; 0x212 <dato_a_mostrar+0x78>
	PORTD |= (1<<PORTD6);
 20a:	9b b1       	in	r25, 0x0b	; 11
 20c:	90 64       	ori	r25, 0x40	; 64
 20e:	9b b9       	out	0x0b, r25	; 11
 210:	03 c0       	rjmp	.+6      	; 0x218 <dato_a_mostrar+0x7e>
	else
	PORTD &= ~(1<<PORTD6);
 212:	9b b1       	in	r25, 0x0b	; 11
 214:	9f 7b       	andi	r25, 0xBF	; 191
 216:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 128)			   //1000 0000
 218:	88 23       	and	r24, r24
 21a:	24 f4       	brge	.+8      	; 0x224 <dato_a_mostrar+0x8a>
	PORTD |= (1<<PORTD7);
 21c:	8b b1       	in	r24, 0x0b	; 11
 21e:	80 68       	ori	r24, 0x80	; 128
 220:	8b b9       	out	0x0b, r24	; 11
 222:	08 95       	ret
	else
	PORTD &= ~(1<<PORTD7);
 224:	8b b1       	in	r24, 0x0b	; 11
 226:	8f 77       	andi	r24, 0x7F	; 127
 228:	8b b9       	out	0x0b, r24	; 11
 22a:	08 95       	ret

0000022c <inicio>:
	inicio(0x06);  //Comando que indica el fabricante del LCD, comenzar a almacenar en DDRAM
}

void inicio(char a)
{
	PORTB &= ~(1<<PORTB0);  //RS = 0, se le indica que es modo comando
 22c:	95 b1       	in	r25, 0x05	; 5
 22e:	9e 7f       	andi	r25, 0xFE	; 254
 230:	95 b9       	out	0x05, r25	; 5
	dato_a_mostrar(a);
 232:	0e 94 cd 00 	call	0x19a	; 0x19a <dato_a_mostrar>
	PORTB |= (1<<PORTB1);    // E = 1, se le indica que envie los datos
 236:	85 b1       	in	r24, 0x05	; 5
 238:	82 60       	ori	r24, 0x02	; 2
 23a:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23c:	8f e9       	ldi	r24, 0x9F	; 159
 23e:	9f e0       	ldi	r25, 0x0F	; 15
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <inicio+0x14>
 244:	00 c0       	rjmp	.+0      	; 0x246 <inicio+0x1a>
 246:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1<<PORTB1);   // E = 0,  se le indica que se cierra el envio de datos
 248:	85 b1       	in	r24, 0x05	; 5
 24a:	8d 7f       	andi	r24, 0xFD	; 253
 24c:	85 b9       	out	0x05, r24	; 5
 24e:	8f e9       	ldi	r24, 0x9F	; 159
 250:	9f e0       	ldi	r25, 0x0F	; 15
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <inicio+0x26>
 256:	00 c0       	rjmp	.+0      	; 0x258 <inicio+0x2c>
 258:	00 00       	nop
 25a:	08 95       	ret

0000025c <Lcd_Init8bits>:
#include "LCD.h"


void Lcd_Init8bits()
{
	PORTB &= ~(1<<PORTB0);   //RS = 0, se le indica que es modo comando
 25c:	85 b1       	in	r24, 0x05	; 5
 25e:	8e 7f       	andi	r24, 0xFE	; 254
 260:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1<<PORTB1);   //E = 0
 262:	85 b1       	in	r24, 0x05	; 5
 264:	8d 7f       	andi	r24, 0xFD	; 253
 266:	85 b9       	out	0x05, r24	; 5
 268:	2f ef       	ldi	r18, 0xFF	; 255
 26a:	89 ef       	ldi	r24, 0xF9	; 249
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	21 50       	subi	r18, 0x01	; 1
 270:	80 40       	sbci	r24, 0x00	; 0
 272:	90 40       	sbci	r25, 0x00	; 0
 274:	e1 f7       	brne	.-8      	; 0x26e <Lcd_Init8bits+0x12>
 276:	00 c0       	rjmp	.+0      	; 0x278 <Lcd_Init8bits+0x1c>
 278:	00 00       	nop
	_delay_ms(20);     //Pequeños delay que indica el fabricante del LCD
	inicio(0x30);     //Comando que se repite 3 veces, que indica el fabricante de la LCD
 27a:	80 e3       	ldi	r24, 0x30	; 48
 27c:	0e 94 16 01 	call	0x22c	; 0x22c <inicio>
 280:	8f e1       	ldi	r24, 0x1F	; 31
 282:	9e e4       	ldi	r25, 0x4E	; 78
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <Lcd_Init8bits+0x28>
 288:	00 c0       	rjmp	.+0      	; 0x28a <Lcd_Init8bits+0x2e>
 28a:	00 00       	nop
	_delay_ms(5);
	inicio(0x30);
 28c:	80 e3       	ldi	r24, 0x30	; 48
 28e:	0e 94 16 01 	call	0x22c	; 0x22c <inicio>
 292:	8f e1       	ldi	r24, 0x1F	; 31
 294:	9e e4       	ldi	r25, 0x4E	; 78
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <Lcd_Init8bits+0x3a>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <Lcd_Init8bits+0x40>
 29c:	00 00       	nop
	_delay_ms(5);
	inicio(0x30);
 29e:	80 e3       	ldi	r24, 0x30	; 48
 2a0:	0e 94 16 01 	call	0x22c	; 0x22c <inicio>
 2a4:	8f e3       	ldi	r24, 0x3F	; 63
 2a6:	9c e9       	ldi	r25, 0x9C	; 156
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <Lcd_Init8bits+0x4c>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <Lcd_Init8bits+0x52>
 2ae:	00 00       	nop
	_delay_ms(10);

	inicio(0x38);  //Comando que indica el fabricante del LCD, usando la matriz de 5X8
 2b0:	88 e3       	ldi	r24, 0x38	; 56
 2b2:	0e 94 16 01 	call	0x22c	; 0x22c <inicio>
	inicio(0x0C);  //Comando que indica el fabricante del LCD, display encendido
 2b6:	8c e0       	ldi	r24, 0x0C	; 12
 2b8:	0e 94 16 01 	call	0x22c	; 0x22c <inicio>
	inicio(0x01);  //Comando que indica el fabricante del LCD, Limpiar LCD
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	0e 94 16 01 	call	0x22c	; 0x22c <inicio>
	inicio(0x06);  //Comando que indica el fabricante del LCD, comenzar a almacenar en DDRAM
 2c2:	86 e0       	ldi	r24, 0x06	; 6
 2c4:	0e 94 16 01 	call	0x22c	; 0x22c <inicio>
 2c8:	08 95       	ret

000002ca <Lcd_Clear>:



void Lcd_Clear()    //Limpia la pantalla LCD
{
	inicio(1);  //Comando dado por el fabricante de la LCD
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	0e 94 16 01 	call	0x22c	; 0x22c <inicio>
 2d0:	08 95       	ret

000002d2 <Lcd_Set_Cursor>:



void Lcd_Set_Cursor(char a, char b)
{
	if(a == 0)
 2d2:	81 11       	cpse	r24, r1
 2d4:	05 c0       	rjmp	.+10     	; 0x2e0 <Lcd_Set_Cursor+0xe>
		inicio(0x80 + b);  //Posicionarse en la linea 1 y se suma la columna 
 2d6:	80 e8       	ldi	r24, 0x80	; 128
 2d8:	86 0f       	add	r24, r22
 2da:	0e 94 16 01 	call	0x22c	; 0x22c <inicio>
 2de:	08 95       	ret
	
	else if(a == 1)
 2e0:	81 30       	cpi	r24, 0x01	; 1
 2e2:	21 f4       	brne	.+8      	; 0x2ec <Lcd_Set_Cursor+0x1a>
		inicio(0xC0 + b);  //Posicionarse en la linea 2  y se suma la columna
 2e4:	80 ec       	ldi	r24, 0xC0	; 192
 2e6:	86 0f       	add	r24, r22
 2e8:	0e 94 16 01 	call	0x22c	; 0x22c <inicio>
 2ec:	08 95       	ret

000002ee <Lcd_Write_Char>:
}


void Lcd_Write_Char(char data)
{
	PORTB |= (1<<PORTB0);        // RS = 1, se le indica que esta en modo caracter
 2ee:	95 b1       	in	r25, 0x05	; 5
 2f0:	91 60       	ori	r25, 0x01	; 1
 2f2:	95 b9       	out	0x05, r25	; 5
	dato_a_mostrar(data);             //Escribir el caracter
 2f4:	0e 94 cd 00 	call	0x19a	; 0x19a <dato_a_mostrar>
	PORTB |= (1<<PORTB1);       // E = 1, enviar el dato
 2f8:	85 b1       	in	r24, 0x05	; 5
 2fa:	82 60       	ori	r24, 0x02	; 2
 2fc:	85 b9       	out	0x05, r24	; 5
 2fe:	8f e9       	ldi	r24, 0x9F	; 159
 300:	9f e0       	ldi	r25, 0x0F	; 15
 302:	01 97       	sbiw	r24, 0x01	; 1
 304:	f1 f7       	brne	.-4      	; 0x302 <Lcd_Write_Char+0x14>
 306:	00 c0       	rjmp	.+0      	; 0x308 <Lcd_Write_Char+0x1a>
 308:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1<<PORTB1);    // E = 0
 30a:	85 b1       	in	r24, 0x05	; 5
 30c:	8d 7f       	andi	r24, 0xFD	; 253
 30e:	85 b9       	out	0x05, r24	; 5
 310:	8f e9       	ldi	r24, 0x9F	; 159
 312:	9f e0       	ldi	r25, 0x0F	; 15
 314:	01 97       	sbiw	r24, 0x01	; 1
 316:	f1 f7       	brne	.-4      	; 0x314 <Lcd_Write_Char+0x26>
 318:	00 c0       	rjmp	.+0      	; 0x31a <Lcd_Write_Char+0x2c>
 31a:	00 00       	nop
 31c:	08 95       	ret

0000031e <Lcd_Write_String>:
	_delay_ms(1);
}


void Lcd_Write_String(char *a) //Usando punteros, ya que, estos almacenan por ejemplo *dato = hola\0, al final siempre llevan un caracter nulo
{
 31e:	0f 93       	push	r16
 320:	1f 93       	push	r17
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	8c 01       	movw	r16, r24
	int i;
	for(i=0; a[i]!='\0'; i++)   //Se recorre todo el puntero, hasta que el valor sea nulo 
 328:	c0 e0       	ldi	r28, 0x00	; 0
 32a:	d0 e0       	ldi	r29, 0x00	; 0
 32c:	03 c0       	rjmp	.+6      	; 0x334 <Lcd_Write_String+0x16>
	Lcd_Write_Char(a[i]);
 32e:	0e 94 77 01 	call	0x2ee	; 0x2ee <Lcd_Write_Char>


void Lcd_Write_String(char *a) //Usando punteros, ya que, estos almacenan por ejemplo *dato = hola\0, al final siempre llevan un caracter nulo
{
	int i;
	for(i=0; a[i]!='\0'; i++)   //Se recorre todo el puntero, hasta que el valor sea nulo 
 332:	21 96       	adiw	r28, 0x01	; 1
 334:	f8 01       	movw	r30, r16
 336:	ec 0f       	add	r30, r28
 338:	fd 1f       	adc	r31, r29
 33a:	80 81       	ld	r24, Z
 33c:	81 11       	cpse	r24, r1
 33e:	f7 cf       	rjmp	.-18     	; 0x32e <Lcd_Write_String+0x10>
	Lcd_Write_Char(a[i]);
}
 340:	df 91       	pop	r29
 342:	cf 91       	pop	r28
 344:	1f 91       	pop	r17
 346:	0f 91       	pop	r16
 348:	08 95       	ret

0000034a <setup>:
char lista3[4] = {'0', '0', '0'}; // 3 caracteres + 1 para el carácter nulo


void setup(void);
void setup(void){
	cli();  //Apagar interrupciones
 34a:	f8 94       	cli
	DDRD = 0xFF;  //Puerto D como salida
 34c:	8f ef       	ldi	r24, 0xFF	; 255
 34e:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;  //Puerto B como salida
 350:	84 b9       	out	0x04, r24	; 4
	DDRC =0;  //Puerto C como entrada
 352:	17 b8       	out	0x07, r1	; 7
	
	UCSR0B = 0;  //Usar los pines TX y RX como digitales
 354:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	Lcd_Init8bits();   //Iniciar pantalla LCD
 358:	0e 94 2e 01 	call	0x25c	; 0x25c <Lcd_Init8bits>
	
	 Lcd_Clear();
 35c:	0e 94 65 01 	call	0x2ca	; 0x2ca <Lcd_Clear>
	initADC(); //Iniciar ADC
 360:	0e 94 ad 00 	call	0x15a	; 0x15a <initADC>
	
	sei(); //Activar interrupciones
 364:	78 94       	sei
 366:	08 95       	ret

00000368 <main>:



int main(void)
{
	setup();
 368:	0e 94 a5 01 	call	0x34a	; 0x34a <setup>
		 }
		 Lcd_Clear();*/
		
		
		
		ADCSRA |=(1<<ADSC);  //Leer ADC
 36c:	ea e7       	ldi	r30, 0x7A	; 122
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	80 81       	ld	r24, Z
 372:	80 64       	ori	r24, 0x40	; 64
 374:	80 83       	st	Z, r24
	
		
		Lcd_Set_Cursor(0,2);  //fila y columna
 376:	62 e0       	ldi	r22, 0x02	; 2
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	0e 94 69 01 	call	0x2d2	; 0x2d2 <Lcd_Set_Cursor>
		Lcd_Write_String("S1:");
 37e:	8f e0       	ldi	r24, 0x0F	; 15
 380:	91 e0       	ldi	r25, 0x01	; 1
 382:	0e 94 8f 01 	call	0x31e	; 0x31e <Lcd_Write_String>
		Lcd_Set_Cursor(0,7);  //fila y columna
 386:	67 e0       	ldi	r22, 0x07	; 7
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	0e 94 69 01 	call	0x2d2	; 0x2d2 <Lcd_Set_Cursor>
		Lcd_Write_String("S2:");
 38e:	83 e1       	ldi	r24, 0x13	; 19
 390:	91 e0       	ldi	r25, 0x01	; 1
 392:	0e 94 8f 01 	call	0x31e	; 0x31e <Lcd_Write_String>
		Lcd_Set_Cursor(0,12);  //fila y columna
 396:	6c e0       	ldi	r22, 0x0C	; 12
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	0e 94 69 01 	call	0x2d2	; 0x2d2 <Lcd_Set_Cursor>
		Lcd_Write_String("S3:");
 39e:	87 e1       	ldi	r24, 0x17	; 23
 3a0:	91 e0       	ldi	r25, 0x01	; 1
 3a2:	0e 94 8f 01 	call	0x31e	; 0x31e <Lcd_Write_String>
		
		
		Lcd_Set_Cursor(1,2);  //fila y columna
 3a6:	62 e0       	ldi	r22, 0x02	; 2
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	0e 94 69 01 	call	0x2d2	; 0x2d2 <Lcd_Set_Cursor>
		Lcd_Write_String(lista1);
 3ae:	87 e2       	ldi	r24, 0x27	; 39
 3b0:	91 e0       	ldi	r25, 0x01	; 1
 3b2:	0e 94 8f 01 	call	0x31e	; 0x31e <Lcd_Write_String>
		Lcd_Set_Cursor(1,7);  //fila y columna
 3b6:	67 e0       	ldi	r22, 0x07	; 7
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	0e 94 69 01 	call	0x2d2	; 0x2d2 <Lcd_Set_Cursor>
		Lcd_Write_String(lista2);
 3be:	8b e2       	ldi	r24, 0x2B	; 43
 3c0:	91 e0       	ldi	r25, 0x01	; 1
 3c2:	0e 94 8f 01 	call	0x31e	; 0x31e <Lcd_Write_String>
		Lcd_Set_Cursor(1,12);  //fila y columna
 3c6:	6c e0       	ldi	r22, 0x0C	; 12
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	0e 94 69 01 	call	0x2d2	; 0x2d2 <Lcd_Set_Cursor>
		Lcd_Write_String(lista3);
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	91 e0       	ldi	r25, 0x01	; 1
 3d2:	0e 94 8f 01 	call	0x31e	; 0x31e <Lcd_Write_String>
		

			//Obtener el dato del potenciometro descompuesto:
			millares = Val2/1000;
 3d6:	00 91 25 01 	lds	r16, 0x0125	; 0x800125 <Val2>
 3da:	10 e0       	ldi	r17, 0x00	; 0
 3dc:	28 ee       	ldi	r18, 0xE8	; 232
 3de:	33 e0       	ldi	r19, 0x03	; 3
 3e0:	c8 01       	movw	r24, r16
 3e2:	b9 01       	movw	r22, r18
 3e4:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__divmodhi4>
 3e8:	7b 01       	movw	r14, r22
			centenas = (Val2-(millares*1000))/100;
 3ea:	48 e1       	ldi	r20, 0x18	; 24
 3ec:	5c ef       	ldi	r21, 0xFC	; 252
 3ee:	64 9f       	mul	r22, r20
 3f0:	c0 01       	movw	r24, r0
 3f2:	65 9f       	mul	r22, r21
 3f4:	90 0d       	add	r25, r0
 3f6:	74 9f       	mul	r23, r20
 3f8:	90 0d       	add	r25, r0
 3fa:	11 24       	eor	r1, r1
 3fc:	80 0f       	add	r24, r16
 3fe:	91 1f       	adc	r25, r17
 400:	64 e6       	ldi	r22, 0x64	; 100
 402:	70 e0       	ldi	r23, 0x00	; 0
 404:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__divmodhi4>
 408:	fb 01       	movw	r30, r22
			decenas = (Val2- (millares*1000 + centenas*100))/10;
 40a:	e2 9e       	mul	r14, r18
 40c:	e0 01       	movw	r28, r0
 40e:	e3 9e       	mul	r14, r19
 410:	d0 0d       	add	r29, r0
 412:	f2 9e       	mul	r15, r18
 414:	d0 0d       	add	r29, r0
 416:	11 24       	eor	r1, r1
 418:	24 e6       	ldi	r18, 0x64	; 100
 41a:	26 9f       	mul	r18, r22
 41c:	c0 01       	movw	r24, r0
 41e:	27 9f       	mul	r18, r23
 420:	90 0d       	add	r25, r0
 422:	11 24       	eor	r1, r1
 424:	c8 0f       	add	r28, r24
 426:	d9 1f       	adc	r29, r25
 428:	c8 01       	movw	r24, r16
 42a:	8c 1b       	sub	r24, r28
 42c:	9d 0b       	sbc	r25, r29
 42e:	6a e0       	ldi	r22, 0x0A	; 10
 430:	70 e0       	ldi	r23, 0x00	; 0
 432:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__divmodhi4>
			unidades = Val2-(millares*1000 + centenas*100 + decenas*10 );
 436:	cb 01       	movw	r24, r22
 438:	88 0f       	add	r24, r24
 43a:	99 1f       	adc	r25, r25
 43c:	9b 01       	movw	r18, r22
 43e:	22 0f       	add	r18, r18
 440:	33 1f       	adc	r19, r19
 442:	22 0f       	add	r18, r18
 444:	33 1f       	adc	r19, r19
 446:	22 0f       	add	r18, r18
 448:	33 1f       	adc	r19, r19
 44a:	82 0f       	add	r24, r18
 44c:	93 1f       	adc	r25, r19
 44e:	8c 0f       	add	r24, r28
 450:	9d 1f       	adc	r25, r29
 452:	08 1b       	sub	r16, r24
 454:	19 0b       	sbc	r17, r25
			
			
			switch(centenas){   //Mostrar centenas
 456:	ea 30       	cpi	r30, 0x0A	; 10
 458:	f1 05       	cpc	r31, r1
 45a:	a8 f5       	brcc	.+106    	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 45c:	ec 5c       	subi	r30, 0xCC	; 204
 45e:	ff 4f       	sbci	r31, 0xFF	; 255
 460:	0c 94 11 05 	jmp	0xa22	; 0xa22 <__tablejump2__>
				case 0:
					lista1[0] = lista[0];   //almacenar cada valor, en la lista a mostrar en la pantalla
 464:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <lista>
 468:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <lista1>
				break;
 46c:	2c c0       	rjmp	.+88     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
				
				
				case 1:
					lista1[0] = lista[1];
 46e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <lista+0x1>
 472:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <lista1>
				break;
 476:	27 c0       	rjmp	.+78     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
				
				case 2:
					lista1[0] = lista[2];
 478:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <lista+0x2>
 47c:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <lista1>
				break;
 480:	22 c0       	rjmp	.+68     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
				
				
				case 3:
					lista1[0] = lista[3];
 482:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lista+0x3>
 486:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <lista1>
				break;
 48a:	1d c0       	rjmp	.+58     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
				
				case 4:
					lista1[0] = lista[4];
 48c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <lista+0x4>
 490:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <lista1>
				break;
 494:	18 c0       	rjmp	.+48     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
				
				
				case 5:
					lista1[0] = lista[5];
 496:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <lista+0x5>
 49a:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <lista1>
				break;
 49e:	13 c0       	rjmp	.+38     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
				
				
				case 6:
					lista1[0] = lista[6];
 4a0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lista+0x6>
 4a4:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <lista1>
				break;
 4a8:	0e c0       	rjmp	.+28     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
				
				
				case 7:
					lista1[0] = lista[7];
 4aa:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <lista+0x7>
 4ae:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <lista1>
				break;
 4b2:	09 c0       	rjmp	.+18     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
				
				case 8:
					lista1[0] = lista[8];
 4b4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <lista+0x8>
 4b8:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <lista1>
				break;
 4bc:	04 c0       	rjmp	.+8      	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
				
				
				case 9:
					lista1[0] = lista[9];
 4be:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <lista+0x9>
 4c2:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <lista1>
				break;
				
			}
			
			
			switch(decenas){   //Mostrar decenas
 4c6:	6a 30       	cpi	r22, 0x0A	; 10
 4c8:	71 05       	cpc	r23, r1
 4ca:	b0 f5       	brcc	.+108    	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
 4cc:	fb 01       	movw	r30, r22
 4ce:	e2 5c       	subi	r30, 0xC2	; 194
 4d0:	ff 4f       	sbci	r31, 0xFF	; 255
 4d2:	0c 94 11 05 	jmp	0xa22	; 0xa22 <__tablejump2__>
				case 0:
					lista1[1] = lista[0];
 4d6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <lista>
 4da:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <lista1+0x1>
				break;
 4de:	2c c0       	rjmp	.+88     	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
				
				
				case 1:
					lista1[1] = lista[1];
 4e0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <lista+0x1>
 4e4:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <lista1+0x1>
				break;
 4e8:	27 c0       	rjmp	.+78     	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
				
				case 2:
					lista1[1] = lista[2];
 4ea:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <lista+0x2>
 4ee:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <lista1+0x1>
				break;
 4f2:	22 c0       	rjmp	.+68     	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
				
				
				case 3:
					lista1[1] = lista[3];
 4f4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lista+0x3>
 4f8:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <lista1+0x1>
				break;
 4fc:	1d c0       	rjmp	.+58     	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
				
				case 4:
				lista1[1] = lista[4];
 4fe:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <lista+0x4>
 502:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <lista1+0x1>
				break;
 506:	18 c0       	rjmp	.+48     	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
				
				
				case 5:
					lista1[1] = lista[5];
 508:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <lista+0x5>
 50c:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <lista1+0x1>
				break;
 510:	13 c0       	rjmp	.+38     	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
				
				
				case 6:
					lista1[1] = lista[6];
 512:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lista+0x6>
 516:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <lista1+0x1>
				break;
 51a:	0e c0       	rjmp	.+28     	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
				
				
				case 7:
					lista1[1] = lista[7];
 51c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <lista+0x7>
 520:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <lista1+0x1>
				break;
 524:	09 c0       	rjmp	.+18     	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
				
				case 8:
					lista1[1] = lista[8];
 526:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <lista+0x8>
 52a:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <lista1+0x1>
				break;
 52e:	04 c0       	rjmp	.+8      	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
				
				
				case 9:
					lista1[1] = lista[9];
 530:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <lista+0x9>
 534:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <lista1+0x1>
				break;
				
			}
			
			switch(unidades){   //Mostrar unidades
 538:	0a 30       	cpi	r16, 0x0A	; 10
 53a:	11 05       	cpc	r17, r1
 53c:	b0 f5       	brcc	.+108    	; 0x5aa <__EEPROM_REGION_LENGTH__+0x1aa>
 53e:	f8 01       	movw	r30, r16
 540:	e8 5b       	subi	r30, 0xB8	; 184
 542:	ff 4f       	sbci	r31, 0xFF	; 255
 544:	0c 94 11 05 	jmp	0xa22	; 0xa22 <__tablejump2__>
				case 0:
					lista1[2] = lista[0];
 548:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <lista>
 54c:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <lista1+0x2>
				break;
 550:	2c c0       	rjmp	.+88     	; 0x5aa <__EEPROM_REGION_LENGTH__+0x1aa>
				
				
				case 1:
					lista1[2] = lista[1];
 552:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <lista+0x1>
 556:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <lista1+0x2>
				break;
 55a:	27 c0       	rjmp	.+78     	; 0x5aa <__EEPROM_REGION_LENGTH__+0x1aa>
				
				case 2:
					lista1[2] = lista[2];
 55c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <lista+0x2>
 560:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <lista1+0x2>
				break;
 564:	22 c0       	rjmp	.+68     	; 0x5aa <__EEPROM_REGION_LENGTH__+0x1aa>
				
				
				case 3:
					lista1[2] = lista[3];
 566:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lista+0x3>
 56a:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <lista1+0x2>
				break;
 56e:	1d c0       	rjmp	.+58     	; 0x5aa <__EEPROM_REGION_LENGTH__+0x1aa>
				
				case 4:
					lista1[2] = lista[4];
 570:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <lista+0x4>
 574:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <lista1+0x2>
				break;
 578:	18 c0       	rjmp	.+48     	; 0x5aa <__EEPROM_REGION_LENGTH__+0x1aa>
				
				
				case 5:
					lista1[2] = lista[5];
 57a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <lista+0x5>
 57e:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <lista1+0x2>
				break;
 582:	13 c0       	rjmp	.+38     	; 0x5aa <__EEPROM_REGION_LENGTH__+0x1aa>
				
				
				case 6:
					lista1[2] = lista[6];
 584:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lista+0x6>
 588:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <lista1+0x2>
				break;
 58c:	0e c0       	rjmp	.+28     	; 0x5aa <__EEPROM_REGION_LENGTH__+0x1aa>
				
				
				case 7:
					lista1[2] = lista[7];
 58e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <lista+0x7>
 592:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <lista1+0x2>
				break;
 596:	09 c0       	rjmp	.+18     	; 0x5aa <__EEPROM_REGION_LENGTH__+0x1aa>
				
				case 8:
					lista1[2] = lista[8];
 598:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <lista+0x8>
 59c:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <lista1+0x2>
				break;
 5a0:	04 c0       	rjmp	.+8      	; 0x5aa <__EEPROM_REGION_LENGTH__+0x1aa>
				
				
				case 9:
					lista1[2] = lista[9];
 5a2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <lista+0x9>
 5a6:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <lista1+0x2>
			}
			
			
		
			//Obtener el dato del potenciometro descompuesto:
			millares = Val1/1000;
 5aa:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <Val1>
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	08 ee       	ldi	r16, 0xE8	; 232
 5b2:	13 e0       	ldi	r17, 0x03	; 3
 5b4:	c9 01       	movw	r24, r18
 5b6:	b8 01       	movw	r22, r16
 5b8:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__divmodhi4>
 5bc:	7b 01       	movw	r14, r22
			centenas = (Val1-(millares*1000))/100;
 5be:	48 e1       	ldi	r20, 0x18	; 24
 5c0:	5c ef       	ldi	r21, 0xFC	; 252
 5c2:	64 9f       	mul	r22, r20
 5c4:	c0 01       	movw	r24, r0
 5c6:	65 9f       	mul	r22, r21
 5c8:	90 0d       	add	r25, r0
 5ca:	74 9f       	mul	r23, r20
 5cc:	90 0d       	add	r25, r0
 5ce:	11 24       	eor	r1, r1
 5d0:	82 0f       	add	r24, r18
 5d2:	93 1f       	adc	r25, r19
 5d4:	64 e6       	ldi	r22, 0x64	; 100
 5d6:	70 e0       	ldi	r23, 0x00	; 0
 5d8:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__divmodhi4>
 5dc:	fb 01       	movw	r30, r22
			decenas = (Val1- (millares*1000 + centenas*100))/10;
 5de:	e0 9e       	mul	r14, r16
 5e0:	e0 01       	movw	r28, r0
 5e2:	e1 9e       	mul	r14, r17
 5e4:	d0 0d       	add	r29, r0
 5e6:	f0 9e       	mul	r15, r16
 5e8:	d0 0d       	add	r29, r0
 5ea:	11 24       	eor	r1, r1
 5ec:	44 e6       	ldi	r20, 0x64	; 100
 5ee:	46 9f       	mul	r20, r22
 5f0:	c0 01       	movw	r24, r0
 5f2:	47 9f       	mul	r20, r23
 5f4:	90 0d       	add	r25, r0
 5f6:	11 24       	eor	r1, r1
 5f8:	c8 0f       	add	r28, r24
 5fa:	d9 1f       	adc	r29, r25
 5fc:	c9 01       	movw	r24, r18
 5fe:	8c 1b       	sub	r24, r28
 600:	9d 0b       	sbc	r25, r29
 602:	6a e0       	ldi	r22, 0x0A	; 10
 604:	70 e0       	ldi	r23, 0x00	; 0
 606:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__divmodhi4>
			unidades = Val1-(millares*1000 + centenas*100 + decenas*10 );
 60a:	cb 01       	movw	r24, r22
 60c:	88 0f       	add	r24, r24
 60e:	99 1f       	adc	r25, r25
 610:	ab 01       	movw	r20, r22
 612:	44 0f       	add	r20, r20
 614:	55 1f       	adc	r21, r21
 616:	44 0f       	add	r20, r20
 618:	55 1f       	adc	r21, r21
 61a:	44 0f       	add	r20, r20
 61c:	55 1f       	adc	r21, r21
 61e:	84 0f       	add	r24, r20
 620:	95 1f       	adc	r25, r21
 622:	8c 0f       	add	r24, r28
 624:	9d 1f       	adc	r25, r29
 626:	28 1b       	sub	r18, r24
 628:	39 0b       	sbc	r19, r25
			
			
			switch(centenas){   //Mostrar centenas
 62a:	ea 30       	cpi	r30, 0x0A	; 10
 62c:	f1 05       	cpc	r31, r1
 62e:	a8 f5       	brcc	.+106    	; 0x69a <__EEPROM_REGION_LENGTH__+0x29a>
 630:	ee 5a       	subi	r30, 0xAE	; 174
 632:	ff 4f       	sbci	r31, 0xFF	; 255
 634:	0c 94 11 05 	jmp	0xa22	; 0xa22 <__tablejump2__>
				case 0:
				lista2[0] = lista[0];    //almacenar cada valor, en la lista a mostrar en la pantalla
 638:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <lista>
 63c:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <lista2>
				break;
 640:	2c c0       	rjmp	.+88     	; 0x69a <__EEPROM_REGION_LENGTH__+0x29a>
				
				
				case 1:
				lista2[0] = lista[1];
 642:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <lista+0x1>
 646:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <lista2>
				break;
 64a:	27 c0       	rjmp	.+78     	; 0x69a <__EEPROM_REGION_LENGTH__+0x29a>
				
				case 2:
				lista2[0] = lista[2];
 64c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <lista+0x2>
 650:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <lista2>
				break;
 654:	22 c0       	rjmp	.+68     	; 0x69a <__EEPROM_REGION_LENGTH__+0x29a>
				
				
				case 3:
				lista2[0] = lista[3];
 656:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lista+0x3>
 65a:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <lista2>
				break;
 65e:	1d c0       	rjmp	.+58     	; 0x69a <__EEPROM_REGION_LENGTH__+0x29a>
				
				case 4:
				lista2[0] = lista[4];
 660:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <lista+0x4>
 664:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <lista2>
				break;
 668:	18 c0       	rjmp	.+48     	; 0x69a <__EEPROM_REGION_LENGTH__+0x29a>
				
				
				case 5:
				lista2[0] = lista[5];
 66a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <lista+0x5>
 66e:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <lista2>
				break;
 672:	13 c0       	rjmp	.+38     	; 0x69a <__EEPROM_REGION_LENGTH__+0x29a>
				
				
				case 6:
				lista2[0] = lista[6];
 674:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lista+0x6>
 678:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <lista2>
				break;
 67c:	0e c0       	rjmp	.+28     	; 0x69a <__EEPROM_REGION_LENGTH__+0x29a>
				
				
				case 7:
				lista2[0] = lista[7];
 67e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <lista+0x7>
 682:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <lista2>
				break;
 686:	09 c0       	rjmp	.+18     	; 0x69a <__EEPROM_REGION_LENGTH__+0x29a>
				
				case 8:
				lista2[0] = lista[8];
 688:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <lista+0x8>
 68c:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <lista2>
				break;
 690:	04 c0       	rjmp	.+8      	; 0x69a <__EEPROM_REGION_LENGTH__+0x29a>
				
				
				case 9:
				lista2[0] = lista[9];
 692:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <lista+0x9>
 696:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <lista2>
				break;
				
			}
			
			
			switch(decenas){   //Mostrar decenas
 69a:	6a 30       	cpi	r22, 0x0A	; 10
 69c:	71 05       	cpc	r23, r1
 69e:	b0 f5       	brcc	.+108    	; 0x70c <__EEPROM_REGION_LENGTH__+0x30c>
 6a0:	fb 01       	movw	r30, r22
 6a2:	e4 5a       	subi	r30, 0xA4	; 164
 6a4:	ff 4f       	sbci	r31, 0xFF	; 255
 6a6:	0c 94 11 05 	jmp	0xa22	; 0xa22 <__tablejump2__>
				case 0:
				lista2[1] = lista[0];
 6aa:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <lista>
 6ae:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <lista2+0x1>
				break;
 6b2:	2c c0       	rjmp	.+88     	; 0x70c <__EEPROM_REGION_LENGTH__+0x30c>
				
				
				case 1:
				lista2[1] = lista[1];
 6b4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <lista+0x1>
 6b8:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <lista2+0x1>
				break;
 6bc:	27 c0       	rjmp	.+78     	; 0x70c <__EEPROM_REGION_LENGTH__+0x30c>
				
				case 2:
				lista2[1] = lista[2];
 6be:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <lista+0x2>
 6c2:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <lista2+0x1>
				break;
 6c6:	22 c0       	rjmp	.+68     	; 0x70c <__EEPROM_REGION_LENGTH__+0x30c>
				
				
				case 3:
				lista2[1] = lista[3];
 6c8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lista+0x3>
 6cc:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <lista2+0x1>
				break;
 6d0:	1d c0       	rjmp	.+58     	; 0x70c <__EEPROM_REGION_LENGTH__+0x30c>
				
				case 4:
				lista2[1] = lista[4];
 6d2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <lista+0x4>
 6d6:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <lista2+0x1>
				break;
 6da:	18 c0       	rjmp	.+48     	; 0x70c <__EEPROM_REGION_LENGTH__+0x30c>
				
				
				case 5:
				lista2[1] = lista[5];
 6dc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <lista+0x5>
 6e0:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <lista2+0x1>
				break;
 6e4:	13 c0       	rjmp	.+38     	; 0x70c <__EEPROM_REGION_LENGTH__+0x30c>
				
				
				case 6:
				lista2[1] = lista[6];
 6e6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lista+0x6>
 6ea:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <lista2+0x1>
				break;
 6ee:	0e c0       	rjmp	.+28     	; 0x70c <__EEPROM_REGION_LENGTH__+0x30c>
				
				
				case 7:
				lista2[1] = lista[7];
 6f0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <lista+0x7>
 6f4:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <lista2+0x1>
				break;
 6f8:	09 c0       	rjmp	.+18     	; 0x70c <__EEPROM_REGION_LENGTH__+0x30c>
				
				case 8:
				lista2[1] = lista[8];
 6fa:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <lista+0x8>
 6fe:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <lista2+0x1>
				break;
 702:	04 c0       	rjmp	.+8      	; 0x70c <__EEPROM_REGION_LENGTH__+0x30c>
				
				
				case 9:
				lista2[1] = lista[9];
 704:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <lista+0x9>
 708:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <lista2+0x1>
				break;
				
			}
			
			switch(unidades){   //Mostrar unidades
 70c:	2a 30       	cpi	r18, 0x0A	; 10
 70e:	31 05       	cpc	r19, r1
 710:	b0 f5       	brcc	.+108    	; 0x77e <__EEPROM_REGION_LENGTH__+0x37e>
 712:	f9 01       	movw	r30, r18
 714:	ea 59       	subi	r30, 0x9A	; 154
 716:	ff 4f       	sbci	r31, 0xFF	; 255
 718:	0c 94 11 05 	jmp	0xa22	; 0xa22 <__tablejump2__>
				case 0:
				lista2[2] = lista[0];
 71c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <lista>
 720:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <lista2+0x2>
				break;
 724:	2c c0       	rjmp	.+88     	; 0x77e <__EEPROM_REGION_LENGTH__+0x37e>
				
				
				case 1:
				lista2[2] = lista[1];
 726:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <lista+0x1>
 72a:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <lista2+0x2>
				break;
 72e:	27 c0       	rjmp	.+78     	; 0x77e <__EEPROM_REGION_LENGTH__+0x37e>
				
				case 2:
				lista2[2] = lista[2];
 730:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <lista+0x2>
 734:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <lista2+0x2>
				break;
 738:	22 c0       	rjmp	.+68     	; 0x77e <__EEPROM_REGION_LENGTH__+0x37e>
				
				
				case 3:
				lista2[2] = lista[3];
 73a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lista+0x3>
 73e:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <lista2+0x2>
				break;
 742:	1d c0       	rjmp	.+58     	; 0x77e <__EEPROM_REGION_LENGTH__+0x37e>
				
				case 4:
				lista2[2] = lista[4];
 744:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <lista+0x4>
 748:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <lista2+0x2>
				break;
 74c:	18 c0       	rjmp	.+48     	; 0x77e <__EEPROM_REGION_LENGTH__+0x37e>
				
				
				case 5:
				lista2[2] = lista[5];
 74e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <lista+0x5>
 752:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <lista2+0x2>
				break;
 756:	13 c0       	rjmp	.+38     	; 0x77e <__EEPROM_REGION_LENGTH__+0x37e>
				
				
				case 6:
				lista2[2] = lista[6];
 758:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lista+0x6>
 75c:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <lista2+0x2>
				break;
 760:	0e c0       	rjmp	.+28     	; 0x77e <__EEPROM_REGION_LENGTH__+0x37e>
				
				
				case 7:
				lista2[2] = lista[7];
 762:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <lista+0x7>
 766:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <lista2+0x2>
				break;
 76a:	09 c0       	rjmp	.+18     	; 0x77e <__EEPROM_REGION_LENGTH__+0x37e>
				
				case 8:
				lista2[2] = lista[8];
 76c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <lista+0x8>
 770:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <lista2+0x2>
				break;
 774:	04 c0       	rjmp	.+8      	; 0x77e <__EEPROM_REGION_LENGTH__+0x37e>
				
				
				case 9:
				lista2[2] = lista[9];
 776:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <lista+0x9>
 77a:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <lista2+0x2>
				break;
		}
		
		millares = cambio/1000;
 77e:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <cambio>
 782:	30 e0       	ldi	r19, 0x00	; 0
 784:	c8 ee       	ldi	r28, 0xE8	; 232
 786:	d3 e0       	ldi	r29, 0x03	; 3
 788:	c9 01       	movw	r24, r18
 78a:	be 01       	movw	r22, r28
 78c:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__divmodhi4>
 790:	8b 01       	movw	r16, r22
 792:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <millares+0x1>
 796:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <millares>
		centenas = (cambio-(millares*1000))/100;
 79a:	48 e1       	ldi	r20, 0x18	; 24
 79c:	5c ef       	ldi	r21, 0xFC	; 252
 79e:	64 9f       	mul	r22, r20
 7a0:	c0 01       	movw	r24, r0
 7a2:	65 9f       	mul	r22, r21
 7a4:	90 0d       	add	r25, r0
 7a6:	74 9f       	mul	r23, r20
 7a8:	90 0d       	add	r25, r0
 7aa:	11 24       	eor	r1, r1
 7ac:	82 0f       	add	r24, r18
 7ae:	93 1f       	adc	r25, r19
 7b0:	64 e6       	ldi	r22, 0x64	; 100
 7b2:	70 e0       	ldi	r23, 0x00	; 0
 7b4:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__divmodhi4>
 7b8:	fb 01       	movw	r30, r22
 7ba:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <centenas+0x1>
 7be:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <centenas>
		decenas = (cambio- (millares*1000 + centenas*100))/10;
 7c2:	0c 9f       	mul	r16, r28
 7c4:	a0 01       	movw	r20, r0
 7c6:	0d 9f       	mul	r16, r29
 7c8:	50 0d       	add	r21, r0
 7ca:	1c 9f       	mul	r17, r28
 7cc:	50 0d       	add	r21, r0
 7ce:	11 24       	eor	r1, r1
 7d0:	64 e6       	ldi	r22, 0x64	; 100
 7d2:	6e 9f       	mul	r22, r30
 7d4:	c0 01       	movw	r24, r0
 7d6:	6f 9f       	mul	r22, r31
 7d8:	90 0d       	add	r25, r0
 7da:	11 24       	eor	r1, r1
 7dc:	ea 01       	movw	r28, r20
 7de:	c8 0f       	add	r28, r24
 7e0:	d9 1f       	adc	r29, r25
 7e2:	c9 01       	movw	r24, r18
 7e4:	8c 1b       	sub	r24, r28
 7e6:	9d 0b       	sbc	r25, r29
 7e8:	6a e0       	ldi	r22, 0x0A	; 10
 7ea:	70 e0       	ldi	r23, 0x00	; 0
 7ec:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__divmodhi4>
 7f0:	70 93 1f 01 	sts	0x011F, r23	; 0x80011f <decenas+0x1>
 7f4:	60 93 1e 01 	sts	0x011E, r22	; 0x80011e <decenas>
		unidades = cambio-(millares*1000 + centenas*100 + decenas*10 );
 7f8:	cb 01       	movw	r24, r22
 7fa:	88 0f       	add	r24, r24
 7fc:	99 1f       	adc	r25, r25
 7fe:	ab 01       	movw	r20, r22
 800:	44 0f       	add	r20, r20
 802:	55 1f       	adc	r21, r21
 804:	44 0f       	add	r20, r20
 806:	55 1f       	adc	r21, r21
 808:	44 0f       	add	r20, r20
 80a:	55 1f       	adc	r21, r21
 80c:	84 0f       	add	r24, r20
 80e:	95 1f       	adc	r25, r21
 810:	8c 0f       	add	r24, r28
 812:	9d 1f       	adc	r25, r29
 814:	28 1b       	sub	r18, r24
 816:	39 0b       	sbc	r19, r25
 818:	30 93 1d 01 	sts	0x011D, r19	; 0x80011d <__data_end+0x1>
 81c:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <__data_end>
		
		
		switch(centenas){   //Mostrar centenas
 820:	ea 30       	cpi	r30, 0x0A	; 10
 822:	f1 05       	cpc	r31, r1
 824:	a8 f5       	brcc	.+106    	; 0x890 <__DATA_REGION_LENGTH__+0x90>
 826:	e0 59       	subi	r30, 0x90	; 144
 828:	ff 4f       	sbci	r31, 0xFF	; 255
 82a:	0c 94 11 05 	jmp	0xa22	; 0xa22 <__tablejump2__>
			case 0:
			lista3[0] = lista[0];    //almacenar cada valor, en la lista a mostrar en la pantalla
 82e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <lista>
 832:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			break;
 836:	2c c0       	rjmp	.+88     	; 0x890 <__DATA_REGION_LENGTH__+0x90>
			
			
			case 1:
			lista3[0] = lista[1];
 838:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <lista+0x1>
 83c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			break;
 840:	27 c0       	rjmp	.+78     	; 0x890 <__DATA_REGION_LENGTH__+0x90>
			
			case 2:
			lista3[0] = lista[2];
 842:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <lista+0x2>
 846:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			break;
 84a:	22 c0       	rjmp	.+68     	; 0x890 <__DATA_REGION_LENGTH__+0x90>
			
			
			case 3:
			lista3[0] = lista[3];
 84c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lista+0x3>
 850:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			break;
 854:	1d c0       	rjmp	.+58     	; 0x890 <__DATA_REGION_LENGTH__+0x90>
			
			case 4:
			lista3[0] = lista[4];
 856:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <lista+0x4>
 85a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			break;
 85e:	18 c0       	rjmp	.+48     	; 0x890 <__DATA_REGION_LENGTH__+0x90>
			
			
			case 5:
			lista3[0] = lista[5];
 860:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <lista+0x5>
 864:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			break;
 868:	13 c0       	rjmp	.+38     	; 0x890 <__DATA_REGION_LENGTH__+0x90>
			
			
			case 6:
			lista3[0] = lista[6];
 86a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lista+0x6>
 86e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			break;
 872:	0e c0       	rjmp	.+28     	; 0x890 <__DATA_REGION_LENGTH__+0x90>
			
			
			case 7:
			lista3[0] = lista[7];
 874:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <lista+0x7>
 878:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			break;
 87c:	09 c0       	rjmp	.+18     	; 0x890 <__DATA_REGION_LENGTH__+0x90>
			
			case 8:
			lista3[0] = lista[8];
 87e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <lista+0x8>
 882:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			break;
 886:	04 c0       	rjmp	.+8      	; 0x890 <__DATA_REGION_LENGTH__+0x90>
			
			
			case 9:
			lista3[0] = lista[9];
 888:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <lista+0x9>
 88c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			break;
			
		}
		
		
		switch(decenas){   //Mostrar decenas
 890:	6a 30       	cpi	r22, 0x0A	; 10
 892:	71 05       	cpc	r23, r1
 894:	b0 f5       	brcc	.+108    	; 0x902 <__stack+0x3>
 896:	fb 01       	movw	r30, r22
 898:	e6 58       	subi	r30, 0x86	; 134
 89a:	ff 4f       	sbci	r31, 0xFF	; 255
 89c:	0c 94 11 05 	jmp	0xa22	; 0xa22 <__tablejump2__>
			case 0:
			lista3[1] = lista[0];
 8a0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <lista>
 8a4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
			break;
 8a8:	2c c0       	rjmp	.+88     	; 0x902 <__stack+0x3>
			
			
			case 1:
			lista3[1] = lista[1];
 8aa:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <lista+0x1>
 8ae:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
			break;
 8b2:	27 c0       	rjmp	.+78     	; 0x902 <__stack+0x3>
			
			case 2:
			lista3[1] = lista[2];
 8b4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <lista+0x2>
 8b8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
			break;
 8bc:	22 c0       	rjmp	.+68     	; 0x902 <__stack+0x3>
			
			
			case 3:
			lista3[1] = lista[3];
 8be:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lista+0x3>
 8c2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
			break;
 8c6:	1d c0       	rjmp	.+58     	; 0x902 <__stack+0x3>
			
			case 4:
			lista3[1] = lista[4];
 8c8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <lista+0x4>
 8cc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
			break;
 8d0:	18 c0       	rjmp	.+48     	; 0x902 <__stack+0x3>
			
			
			case 5:
			lista3[1] = lista[5];
 8d2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <lista+0x5>
 8d6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
			break;
 8da:	13 c0       	rjmp	.+38     	; 0x902 <__stack+0x3>
			
			
			case 6:
			lista3[1] = lista[6];
 8dc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lista+0x6>
 8e0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
			break;
 8e4:	0e c0       	rjmp	.+28     	; 0x902 <__stack+0x3>
			
			
			case 7:
			lista3[1] = lista[7];
 8e6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <lista+0x7>
 8ea:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
			break;
 8ee:	09 c0       	rjmp	.+18     	; 0x902 <__stack+0x3>
			
			case 8:
			lista3[1] = lista[8];
 8f0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <lista+0x8>
 8f4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
			break;
 8f8:	04 c0       	rjmp	.+8      	; 0x902 <__stack+0x3>
			
			
			case 9:
			lista3[1] = lista[9];
 8fa:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <lista+0x9>
 8fe:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
			break;
			
		}
		
		switch(unidades){   //Mostrar unidades
 902:	2a 30       	cpi	r18, 0x0A	; 10
 904:	31 05       	cpc	r19, r1
 906:	b0 f5       	brcc	.+108    	; 0x974 <__stack+0x75>
 908:	f9 01       	movw	r30, r18
 90a:	ec 57       	subi	r30, 0x7C	; 124
 90c:	ff 4f       	sbci	r31, 0xFF	; 255
 90e:	0c 94 11 05 	jmp	0xa22	; 0xa22 <__tablejump2__>
			case 0:
			lista3[2] = lista[0];
 912:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <lista>
 916:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
			break;
 91a:	2c c0       	rjmp	.+88     	; 0x974 <__stack+0x75>
			
			
			case 1:
			lista3[2] = lista[1];
 91c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <lista+0x1>
 920:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
			break;
 924:	27 c0       	rjmp	.+78     	; 0x974 <__stack+0x75>
			
			case 2:
			lista3[2] = lista[2];
 926:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <lista+0x2>
 92a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
			break;
 92e:	22 c0       	rjmp	.+68     	; 0x974 <__stack+0x75>
			
			
			case 3:
			lista3[2] = lista[3];
 930:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lista+0x3>
 934:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
			break;
 938:	1d c0       	rjmp	.+58     	; 0x974 <__stack+0x75>
			
			case 4:
			lista3[2] = lista[4];
 93a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <lista+0x4>
 93e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
			break;
 942:	18 c0       	rjmp	.+48     	; 0x974 <__stack+0x75>
			
			
			case 5:
			lista3[2] = lista[5];
 944:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <lista+0x5>
 948:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
			break;
 94c:	13 c0       	rjmp	.+38     	; 0x974 <__stack+0x75>
			
			
			case 6:
			lista3[2] = lista[6];
 94e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lista+0x6>
 952:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
			break;
 956:	0e c0       	rjmp	.+28     	; 0x974 <__stack+0x75>
			
			
			case 7:
			lista3[2] = lista[7];
 958:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <lista+0x7>
 95c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
			break;
 960:	09 c0       	rjmp	.+18     	; 0x974 <__stack+0x75>
			
			case 8:
			lista3[2] = lista[8];
 962:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <lista+0x8>
 966:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
			break;
 96a:	04 c0       	rjmp	.+8      	; 0x974 <__stack+0x75>
			
			
			case 9:
			lista3[2] = lista[9];
 96c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <lista+0x9>
 970:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 974:	2f ef       	ldi	r18, 0xFF	; 255
 976:	81 ee       	ldi	r24, 0xE1	; 225
 978:	94 e0       	ldi	r25, 0x04	; 4
 97a:	21 50       	subi	r18, 0x01	; 1
 97c:	80 40       	sbci	r24, 0x00	; 0
 97e:	90 40       	sbci	r25, 0x00	; 0
 980:	e1 f7       	brne	.-8      	; 0x97a <__stack+0x7b>
 982:	00 c0       	rjmp	.+0      	; 0x984 <__stack+0x85>
 984:	00 00       	nop
			break;
		}
		
		_delay_ms(100);
		 Lcd_Clear();
 986:	0e 94 65 01 	call	0x2ca	; 0x2ca <Lcd_Clear>
	
		
 
		 
    }
 98a:	f0 cc       	rjmp	.-1568   	; 0x36c <main+0x4>

0000098c <__vector_21>:
}



ISR(ADC_vect){
 98c:	1f 92       	push	r1
 98e:	0f 92       	push	r0
 990:	0f b6       	in	r0, 0x3f	; 63
 992:	0f 92       	push	r0
 994:	11 24       	eor	r1, r1
 996:	8f 93       	push	r24
 998:	ef 93       	push	r30
 99a:	ff 93       	push	r31
	
	switch (caso){
 99c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <caso>
 9a0:	88 23       	and	r24, r24
 9a2:	19 f0       	breq	.+6      	; 0x9aa <__vector_21+0x1e>
 9a4:	81 30       	cpi	r24, 0x01	; 1
 9a6:	71 f0       	breq	.+28     	; 0x9c4 <__vector_21+0x38>
 9a8:	1b c0       	rjmp	.+54     	; 0x9e0 <__vector_21+0x54>
		case 0:
		ADMUX &= ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0)); //Borrar configuracion actual y poner ADC1
 9aa:	ec e7       	ldi	r30, 0x7C	; 124
 9ac:	f0 e0       	ldi	r31, 0x00	; 0
 9ae:	80 81       	ld	r24, Z
 9b0:	88 7f       	andi	r24, 0xF8	; 248
 9b2:	80 83       	st	Z, r24
		Val1 = ADCH;
 9b4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 9b8:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <Val1>
		caso = 1;
 9bc:	81 e0       	ldi	r24, 0x01	; 1
 9be:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <caso>
		break;
 9c2:	0e c0       	rjmp	.+28     	; 0x9e0 <__vector_21+0x54>
		
		case 1:
		ADMUX &= ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0));   //Borrar configuracion actual y poner ADC0
 9c4:	ec e7       	ldi	r30, 0x7C	; 124
 9c6:	f0 e0       	ldi	r31, 0x00	; 0
 9c8:	80 81       	ld	r24, Z
 9ca:	88 7f       	andi	r24, 0xF8	; 248
 9cc:	80 83       	st	Z, r24
		ADMUX |= (1<<MUX0);
 9ce:	80 81       	ld	r24, Z
 9d0:	81 60       	ori	r24, 0x01	; 1
 9d2:	80 83       	st	Z, r24
		Val2 = ADCH;
 9d4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 9d8:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <Val2>
		caso = 0;
 9dc:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <caso>
		break;
	}
	
	ADCSRA |= (1<<ADIF); //Se borra la bandera de interrupción
 9e0:	ea e7       	ldi	r30, 0x7A	; 122
 9e2:	f0 e0       	ldi	r31, 0x00	; 0
 9e4:	80 81       	ld	r24, Z
 9e6:	80 61       	ori	r24, 0x10	; 16
 9e8:	80 83       	st	Z, r24

}
 9ea:	ff 91       	pop	r31
 9ec:	ef 91       	pop	r30
 9ee:	8f 91       	pop	r24
 9f0:	0f 90       	pop	r0
 9f2:	0f be       	out	0x3f, r0	; 63
 9f4:	0f 90       	pop	r0
 9f6:	1f 90       	pop	r1
 9f8:	18 95       	reti

000009fa <__divmodhi4>:
 9fa:	97 fb       	bst	r25, 7
 9fc:	07 2e       	mov	r0, r23
 9fe:	16 f4       	brtc	.+4      	; 0xa04 <__divmodhi4+0xa>
 a00:	00 94       	com	r0
 a02:	07 d0       	rcall	.+14     	; 0xa12 <__divmodhi4_neg1>
 a04:	77 fd       	sbrc	r23, 7
 a06:	09 d0       	rcall	.+18     	; 0xa1a <__divmodhi4_neg2>
 a08:	0e 94 17 05 	call	0xa2e	; 0xa2e <__udivmodhi4>
 a0c:	07 fc       	sbrc	r0, 7
 a0e:	05 d0       	rcall	.+10     	; 0xa1a <__divmodhi4_neg2>
 a10:	3e f4       	brtc	.+14     	; 0xa20 <__divmodhi4_exit>

00000a12 <__divmodhi4_neg1>:
 a12:	90 95       	com	r25
 a14:	81 95       	neg	r24
 a16:	9f 4f       	sbci	r25, 0xFF	; 255
 a18:	08 95       	ret

00000a1a <__divmodhi4_neg2>:
 a1a:	70 95       	com	r23
 a1c:	61 95       	neg	r22
 a1e:	7f 4f       	sbci	r23, 0xFF	; 255

00000a20 <__divmodhi4_exit>:
 a20:	08 95       	ret

00000a22 <__tablejump2__>:
 a22:	ee 0f       	add	r30, r30
 a24:	ff 1f       	adc	r31, r31
 a26:	05 90       	lpm	r0, Z+
 a28:	f4 91       	lpm	r31, Z
 a2a:	e0 2d       	mov	r30, r0
 a2c:	09 94       	ijmp

00000a2e <__udivmodhi4>:
 a2e:	aa 1b       	sub	r26, r26
 a30:	bb 1b       	sub	r27, r27
 a32:	51 e1       	ldi	r21, 0x11	; 17
 a34:	07 c0       	rjmp	.+14     	; 0xa44 <__udivmodhi4_ep>

00000a36 <__udivmodhi4_loop>:
 a36:	aa 1f       	adc	r26, r26
 a38:	bb 1f       	adc	r27, r27
 a3a:	a6 17       	cp	r26, r22
 a3c:	b7 07       	cpc	r27, r23
 a3e:	10 f0       	brcs	.+4      	; 0xa44 <__udivmodhi4_ep>
 a40:	a6 1b       	sub	r26, r22
 a42:	b7 0b       	sbc	r27, r23

00000a44 <__udivmodhi4_ep>:
 a44:	88 1f       	adc	r24, r24
 a46:	99 1f       	adc	r25, r25
 a48:	5a 95       	dec	r21
 a4a:	a9 f7       	brne	.-22     	; 0xa36 <__udivmodhi4_loop>
 a4c:	80 95       	com	r24
 a4e:	90 95       	com	r25
 a50:	bc 01       	movw	r22, r24
 a52:	cd 01       	movw	r24, r26
 a54:	08 95       	ret

00000a56 <_exit>:
 a56:	f8 94       	cli

00000a58 <__stop_program>:
 a58:	ff cf       	rjmp	.-2      	; 0xa58 <__stop_program>
