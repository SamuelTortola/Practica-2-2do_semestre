
LAB2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000124  00800100  00000ef0  00000f84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ef0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800224  00800224  000010a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00001118  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001308  00000000  00000000  00001200  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000905  00000000  00000000  00002508  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fb8  00000000  00000000  00002e0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  00003dc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000540  00000000  00000000  00003f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004a4  00000000  00000000  000044a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000494c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 ac 00 	jmp	0x158	; 0x158 <__ctors_end>
   4:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
   8:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
   c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  10:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  14:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  18:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  1c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  20:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  24:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  28:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  2c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  30:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  34:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  38:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  3c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  40:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  44:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  48:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__vector_18>
  4c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  50:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  54:	0c 94 ca 06 	jmp	0xd94	; 0xd94 <__vector_21>
  58:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  5c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  60:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  64:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  68:	7e 02       	muls	r23, r30
  6a:	83 02       	muls	r24, r19
  6c:	88 02       	muls	r24, r24
  6e:	8d 02       	muls	r24, r29
  70:	92 02       	muls	r25, r18
  72:	97 02       	muls	r25, r23
  74:	9c 02       	muls	r25, r28
  76:	a1 02       	muls	r26, r17
  78:	a6 02       	muls	r26, r22
  7a:	ab 02       	muls	r26, r27
  7c:	b7 02       	muls	r27, r23
  7e:	bc 02       	muls	r27, r28
  80:	c1 02       	muls	r28, r17
  82:	c6 02       	muls	r28, r22
  84:	cb 02       	muls	r28, r27
  86:	d0 02       	muls	r29, r16
  88:	d5 02       	muls	r29, r21
  8a:	da 02       	muls	r29, r26
  8c:	df 02       	muls	r29, r31
  8e:	e4 02       	muls	r30, r20
  90:	f0 02       	muls	r31, r16
  92:	f5 02       	muls	r31, r21
  94:	fa 02       	muls	r31, r26
  96:	ff 02       	muls	r31, r31
  98:	04 03       	mulsu	r16, r20
  9a:	09 03       	fmul	r16, r17
  9c:	0e 03       	fmul	r16, r22
  9e:	13 03       	mulsu	r17, r19
  a0:	18 03       	fmul	r17, r16
  a2:	1d 03       	fmul	r17, r21
  a4:	79 03       	fmul	r23, r17
  a6:	7e 03       	fmul	r23, r22
  a8:	83 03       	fmuls	r16, r19
  aa:	88 03       	fmulsu	r16, r16
  ac:	8d 03       	fmulsu	r16, r21
  ae:	92 03       	fmuls	r17, r18
  b0:	97 03       	fmuls	r17, r23
  b2:	9c 03       	fmulsu	r17, r20
  b4:	a1 03       	fmuls	r18, r17
  b6:	a6 03       	fmuls	r18, r22
  b8:	b2 03       	fmuls	r19, r18
  ba:	b7 03       	fmuls	r19, r23
  bc:	bc 03       	fmulsu	r19, r20
  be:	c1 03       	fmuls	r20, r17
  c0:	c6 03       	fmuls	r20, r22
  c2:	cb 03       	fmulsu	r20, r19
  c4:	d0 03       	fmuls	r21, r16
  c6:	d5 03       	fmuls	r21, r21
  c8:	da 03       	fmulsu	r21, r18
  ca:	df 03       	fmulsu	r21, r23
  cc:	eb 03       	fmulsu	r22, r19
  ce:	f0 03       	fmuls	r23, r16
  d0:	f5 03       	fmuls	r23, r21
  d2:	fa 03       	fmulsu	r23, r18
  d4:	ff 03       	fmulsu	r23, r23
  d6:	04 04       	cpc	r0, r4
  d8:	09 04       	cpc	r0, r9
  da:	0e 04       	cpc	r0, r14
  dc:	13 04       	cpc	r1, r3
  de:	18 04       	cpc	r1, r8
  e0:	d3 04       	cpc	r13, r3
  e2:	d8 04       	cpc	r13, r8
  e4:	dd 04       	cpc	r13, r13
  e6:	e2 04       	cpc	r14, r2
  e8:	e7 04       	cpc	r14, r7
  ea:	ec 04       	cpc	r14, r12
  ec:	f1 04       	cpc	r15, r1
  ee:	f6 04       	cpc	r15, r6
  f0:	fb 04       	cpc	r15, r11
  f2:	00 05       	cpc	r16, r0
  f4:	0c 05       	cpc	r16, r12
  f6:	11 05       	cpc	r17, r1
  f8:	16 05       	cpc	r17, r6
  fa:	1b 05       	cpc	r17, r11
  fc:	20 05       	cpc	r18, r0
  fe:	25 05       	cpc	r18, r5
 100:	2a 05       	cpc	r18, r10
 102:	2f 05       	cpc	r18, r15
 104:	34 05       	cpc	r19, r4
 106:	39 05       	cpc	r19, r9
 108:	45 05       	cpc	r20, r5
 10a:	4a 05       	cpc	r20, r10
 10c:	4f 05       	cpc	r20, r15
 10e:	54 05       	cpc	r21, r4
 110:	59 05       	cpc	r21, r9
 112:	5e 05       	cpc	r21, r14
 114:	63 05       	cpc	r22, r3
 116:	68 05       	cpc	r22, r8
 118:	6d 05       	cpc	r22, r13
 11a:	72 05       	cpc	r23, r2
 11c:	fd 05       	cpc	r31, r13
 11e:	02 06       	cpc	r0, r18
 120:	07 06       	cpc	r0, r23
 122:	0c 06       	cpc	r0, r28
 124:	11 06       	cpc	r1, r17
 126:	16 06       	cpc	r1, r22
 128:	1b 06       	cpc	r1, r27
 12a:	20 06       	cpc	r2, r16
 12c:	25 06       	cpc	r2, r21
 12e:	2a 06       	cpc	r2, r26
 130:	36 06       	cpc	r3, r22
 132:	3b 06       	cpc	r3, r27
 134:	40 06       	cpc	r4, r16
 136:	45 06       	cpc	r4, r21
 138:	4a 06       	cpc	r4, r26
 13a:	4f 06       	cpc	r4, r31
 13c:	54 06       	cpc	r5, r20
 13e:	59 06       	cpc	r5, r25
 140:	5e 06       	cpc	r5, r30
 142:	63 06       	cpc	r6, r19
 144:	6f 06       	cpc	r6, r31
 146:	74 06       	cpc	r7, r20
 148:	79 06       	cpc	r7, r25
 14a:	7e 06       	cpc	r7, r30
 14c:	83 06       	cpc	r8, r19
 14e:	88 06       	cpc	r8, r24
 150:	8d 06       	cpc	r8, r29
 152:	92 06       	cpc	r9, r18
 154:	97 06       	cpc	r9, r23
 156:	9c 06       	cpc	r9, r28

00000158 <__ctors_end>:
 158:	11 24       	eor	r1, r1
 15a:	1f be       	out	0x3f, r1	; 63
 15c:	cf ef       	ldi	r28, 0xFF	; 255
 15e:	d8 e0       	ldi	r29, 0x08	; 8
 160:	de bf       	out	0x3e, r29	; 62
 162:	cd bf       	out	0x3d, r28	; 61

00000164 <__do_copy_data>:
 164:	12 e0       	ldi	r17, 0x02	; 2
 166:	a0 e0       	ldi	r26, 0x00	; 0
 168:	b1 e0       	ldi	r27, 0x01	; 1
 16a:	e0 ef       	ldi	r30, 0xF0	; 240
 16c:	fe e0       	ldi	r31, 0x0E	; 14
 16e:	02 c0       	rjmp	.+4      	; 0x174 <__do_copy_data+0x10>
 170:	05 90       	lpm	r0, Z+
 172:	0d 92       	st	X+, r0
 174:	a4 32       	cpi	r26, 0x24	; 36
 176:	b1 07       	cpc	r27, r17
 178:	d9 f7       	brne	.-10     	; 0x170 <__do_copy_data+0xc>

0000017a <__do_clear_bss>:
 17a:	22 e0       	ldi	r18, 0x02	; 2
 17c:	a4 e2       	ldi	r26, 0x24	; 36
 17e:	b2 e0       	ldi	r27, 0x02	; 2
 180:	01 c0       	rjmp	.+2      	; 0x184 <.do_clear_bss_start>

00000182 <.do_clear_bss_loop>:
 182:	1d 92       	st	X+, r1

00000184 <.do_clear_bss_start>:
 184:	ac 33       	cpi	r26, 0x3C	; 60
 186:	b2 07       	cpc	r27, r18
 188:	e1 f7       	brne	.-8      	; 0x182 <.do_clear_bss_loop>
 18a:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <main>
 18e:	0c 94 76 07 	jmp	0xeec	; 0xeec <_exit>

00000192 <__bad_interrupt>:
 192:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000196 <initADC>:
#include "ADC.h"

void initADC(){
	
	ADMUX = 0;
 196:	ec e7       	ldi	r30, 0x7C	; 124
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	10 82       	st	Z, r1
	DIDR0 |= (1 <<ADC0D);	//desabilitar el A0 como digital
 19c:	ae e7       	ldi	r26, 0x7E	; 126
 19e:	b0 e0       	ldi	r27, 0x00	; 0
 1a0:	8c 91       	ld	r24, X
 1a2:	81 60       	ori	r24, 0x01	; 1
 1a4:	8c 93       	st	X, r24
	DIDR0 |= (1<<ADC1D);     //desabilitar el A1 como digital
 1a6:	8c 91       	ld	r24, X
 1a8:	82 60       	ori	r24, 0x02	; 2
 1aa:	8c 93       	st	X, r24


	//JUSTIFICACION IZQUIERDA
	ADMUX |= (1<<ADLAR);
 1ac:	80 81       	ld	r24, Z
 1ae:	80 62       	ori	r24, 0x20	; 32
 1b0:	80 83       	st	Z, r24
	//REFERENCIA INTERNA
	ADMUX |= (1<<REFS0);
 1b2:	80 81       	ld	r24, Z
 1b4:	80 64       	ori	r24, 0x40	; 64
 1b6:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);
 1b8:	80 81       	ld	r24, Z
 1ba:	8f 77       	andi	r24, 0x7F	; 127
 1bc:	80 83       	st	Z, r24
	// HABILITAR INTERRUPCION
	ADCSRA |= (1<<ADIE);
 1be:	ea e7       	ldi	r30, 0x7A	; 122
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	88 60       	ori	r24, 0x08	; 8
 1c6:	80 83       	st	Z, r24
	//PRESCALER 128
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);  //Habilitando prescaler de 16M/128 frecuencia = 125Khz
 1c8:	80 81       	ld	r24, Z
 1ca:	87 60       	ori	r24, 0x07	; 7
 1cc:	80 83       	st	Z, r24
	//HABILITAR ADC
	ADCSRA |= (1<<ADEN);
 1ce:	80 81       	ld	r24, Z
 1d0:	80 68       	ori	r24, 0x80	; 128
 1d2:	80 83       	st	Z, r24
 1d4:	08 95       	ret

000001d6 <dato_a_mostrar>:
}


void dato_a_mostrar(char a)
{
	if(a & 1)				//0000 0001, el  a&1 es una operación bitwise, si el primer bit menos signfiativo es 1, la condición es verdadera
 1d6:	80 ff       	sbrs	r24, 0
 1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <dato_a_mostrar+0xc>
	PORTB |= (1<<3);
 1da:	95 b1       	in	r25, 0x05	; 5
 1dc:	98 60       	ori	r25, 0x08	; 8
 1de:	95 b9       	out	0x05, r25	; 5
 1e0:	03 c0       	rjmp	.+6      	; 0x1e8 <dato_a_mostrar+0x12>
	else
	PORTB &= ~(1<<3);
 1e2:	95 b1       	in	r25, 0x05	; 5
 1e4:	97 7f       	andi	r25, 0xF7	; 247
 1e6:	95 b9       	out	0x05, r25	; 5
	
	if(a & 2)			   //0000 0010, ahora verifica el segundo bit menos significativo, y si es 1, la condición es verdadera
 1e8:	81 ff       	sbrs	r24, 1
 1ea:	04 c0       	rjmp	.+8      	; 0x1f4 <dato_a_mostrar+0x1e>
	PORTB |= (1<<2);
 1ec:	95 b1       	in	r25, 0x05	; 5
 1ee:	94 60       	ori	r25, 0x04	; 4
 1f0:	95 b9       	out	0x05, r25	; 5
 1f2:	03 c0       	rjmp	.+6      	; 0x1fa <dato_a_mostrar+0x24>
	else
	PORTB &= ~(1<<2);
 1f4:	95 b1       	in	r25, 0x05	; 5
 1f6:	9b 7f       	andi	r25, 0xFB	; 251
 1f8:	95 b9       	out	0x05, r25	; 5
	
	if(a & 4)				//0000 0100
 1fa:	82 ff       	sbrs	r24, 2
 1fc:	04 c0       	rjmp	.+8      	; 0x206 <dato_a_mostrar+0x30>
	PORTD |= (1<<PORTD2);
 1fe:	9b b1       	in	r25, 0x0b	; 11
 200:	94 60       	ori	r25, 0x04	; 4
 202:	9b b9       	out	0x0b, r25	; 11
 204:	03 c0       	rjmp	.+6      	; 0x20c <dato_a_mostrar+0x36>
	else
	PORTD &= ~(1<<PORTD2);
 206:	9b b1       	in	r25, 0x0b	; 11
 208:	9b 7f       	andi	r25, 0xFB	; 251
 20a:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 8)				//0000 1000
 20c:	83 ff       	sbrs	r24, 3
 20e:	04 c0       	rjmp	.+8      	; 0x218 <dato_a_mostrar+0x42>
	PORTD |= (1<<PORTD3);
 210:	9b b1       	in	r25, 0x0b	; 11
 212:	98 60       	ori	r25, 0x08	; 8
 214:	9b b9       	out	0x0b, r25	; 11
 216:	03 c0       	rjmp	.+6      	; 0x21e <dato_a_mostrar+0x48>
	else
	PORTD &= ~(1<<PORTD3);
 218:	9b b1       	in	r25, 0x0b	; 11
 21a:	97 7f       	andi	r25, 0xF7	; 247
 21c:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 16)			    //0001 0000
 21e:	84 ff       	sbrs	r24, 4
 220:	04 c0       	rjmp	.+8      	; 0x22a <dato_a_mostrar+0x54>
	PORTD |= (1<<PORTD4);
 222:	9b b1       	in	r25, 0x0b	; 11
 224:	90 61       	ori	r25, 0x10	; 16
 226:	9b b9       	out	0x0b, r25	; 11
 228:	03 c0       	rjmp	.+6      	; 0x230 <dato_a_mostrar+0x5a>
	else
	PORTD &= ~(1<<PORTD4);
 22a:	9b b1       	in	r25, 0x0b	; 11
 22c:	9f 7e       	andi	r25, 0xEF	; 239
 22e:	9b b9       	out	0x0b, r25	; 11

	if(a & 32)			    //0010 0000
 230:	85 ff       	sbrs	r24, 5
 232:	04 c0       	rjmp	.+8      	; 0x23c <dato_a_mostrar+0x66>
	PORTD |= (1<<PORTD5);
 234:	9b b1       	in	r25, 0x0b	; 11
 236:	90 62       	ori	r25, 0x20	; 32
 238:	9b b9       	out	0x0b, r25	; 11
 23a:	03 c0       	rjmp	.+6      	; 0x242 <dato_a_mostrar+0x6c>
	else
	PORTD &= ~(1<<PORTD5);
 23c:	9b b1       	in	r25, 0x0b	; 11
 23e:	9f 7d       	andi	r25, 0xDF	; 223
 240:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 64)			   //0100 0000
 242:	86 ff       	sbrs	r24, 6
 244:	04 c0       	rjmp	.+8      	; 0x24e <dato_a_mostrar+0x78>
	PORTD |= (1<<PORTD6);
 246:	9b b1       	in	r25, 0x0b	; 11
 248:	90 64       	ori	r25, 0x40	; 64
 24a:	9b b9       	out	0x0b, r25	; 11
 24c:	03 c0       	rjmp	.+6      	; 0x254 <dato_a_mostrar+0x7e>
	else
	PORTD &= ~(1<<PORTD6);
 24e:	9b b1       	in	r25, 0x0b	; 11
 250:	9f 7b       	andi	r25, 0xBF	; 191
 252:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 128)			   //1000 0000
 254:	88 23       	and	r24, r24
 256:	24 f4       	brge	.+8      	; 0x260 <dato_a_mostrar+0x8a>
	PORTD |= (1<<PORTD7);
 258:	8b b1       	in	r24, 0x0b	; 11
 25a:	80 68       	ori	r24, 0x80	; 128
 25c:	8b b9       	out	0x0b, r24	; 11
 25e:	08 95       	ret
	else
	PORTD &= ~(1<<PORTD7);
 260:	8b b1       	in	r24, 0x0b	; 11
 262:	8f 77       	andi	r24, 0x7F	; 127
 264:	8b b9       	out	0x0b, r24	; 11
 266:	08 95       	ret

00000268 <inicio>:
	inicio(0x06);  //Comando que indica el fabricante del LCD, comenzar a almacenar en DDRAM
}

void inicio(char a)
{
	PORTB &= ~(1<<PORTB0);  //RS = 0, se le indica que es modo comando
 268:	95 b1       	in	r25, 0x05	; 5
 26a:	9e 7f       	andi	r25, 0xFE	; 254
 26c:	95 b9       	out	0x05, r25	; 5
	dato_a_mostrar(a);
 26e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <dato_a_mostrar>
	PORTB |= (1<<PORTB1);    // E = 1, se le indica que envie los datos
 272:	85 b1       	in	r24, 0x05	; 5
 274:	82 60       	ori	r24, 0x02	; 2
 276:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 278:	8f e9       	ldi	r24, 0x9F	; 159
 27a:	9f e0       	ldi	r25, 0x0F	; 15
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <inicio+0x14>
 280:	00 c0       	rjmp	.+0      	; 0x282 <inicio+0x1a>
 282:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1<<PORTB1);   // E = 0,  se le indica que se cierra el envio de datos
 284:	85 b1       	in	r24, 0x05	; 5
 286:	8d 7f       	andi	r24, 0xFD	; 253
 288:	85 b9       	out	0x05, r24	; 5
 28a:	8f e9       	ldi	r24, 0x9F	; 159
 28c:	9f e0       	ldi	r25, 0x0F	; 15
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <inicio+0x26>
 292:	00 c0       	rjmp	.+0      	; 0x294 <inicio+0x2c>
 294:	00 00       	nop
 296:	08 95       	ret

00000298 <Lcd_Init8bits>:
#include "LCD.h"


void Lcd_Init8bits()
{
	PORTB &= ~(1<<PORTB0);   //RS = 0, se le indica que es modo comando
 298:	85 b1       	in	r24, 0x05	; 5
 29a:	8e 7f       	andi	r24, 0xFE	; 254
 29c:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1<<PORTB1);   //E = 0
 29e:	85 b1       	in	r24, 0x05	; 5
 2a0:	8d 7f       	andi	r24, 0xFD	; 253
 2a2:	85 b9       	out	0x05, r24	; 5
 2a4:	2f ef       	ldi	r18, 0xFF	; 255
 2a6:	89 ef       	ldi	r24, 0xF9	; 249
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	21 50       	subi	r18, 0x01	; 1
 2ac:	80 40       	sbci	r24, 0x00	; 0
 2ae:	90 40       	sbci	r25, 0x00	; 0
 2b0:	e1 f7       	brne	.-8      	; 0x2aa <Lcd_Init8bits+0x12>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <Lcd_Init8bits+0x1c>
 2b4:	00 00       	nop
	_delay_ms(20);     //Pequeños delay que indica el fabricante del LCD
	inicio(0x30);     //Comando que se repite 3 veces, que indica el fabricante de la LCD
 2b6:	80 e3       	ldi	r24, 0x30	; 48
 2b8:	0e 94 34 01 	call	0x268	; 0x268 <inicio>
 2bc:	8f e1       	ldi	r24, 0x1F	; 31
 2be:	9e e4       	ldi	r25, 0x4E	; 78
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <Lcd_Init8bits+0x28>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <Lcd_Init8bits+0x2e>
 2c6:	00 00       	nop
	_delay_ms(5);
	inicio(0x30);
 2c8:	80 e3       	ldi	r24, 0x30	; 48
 2ca:	0e 94 34 01 	call	0x268	; 0x268 <inicio>
 2ce:	8f e1       	ldi	r24, 0x1F	; 31
 2d0:	9e e4       	ldi	r25, 0x4E	; 78
 2d2:	01 97       	sbiw	r24, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <Lcd_Init8bits+0x3a>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <Lcd_Init8bits+0x40>
 2d8:	00 00       	nop
	_delay_ms(5);
	inicio(0x30);
 2da:	80 e3       	ldi	r24, 0x30	; 48
 2dc:	0e 94 34 01 	call	0x268	; 0x268 <inicio>
 2e0:	8f e3       	ldi	r24, 0x3F	; 63
 2e2:	9c e9       	ldi	r25, 0x9C	; 156
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <Lcd_Init8bits+0x4c>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <Lcd_Init8bits+0x52>
 2ea:	00 00       	nop
	_delay_ms(10);

	inicio(0x38);  //Comando que indica el fabricante del LCD, usando la matriz de 5X8
 2ec:	88 e3       	ldi	r24, 0x38	; 56
 2ee:	0e 94 34 01 	call	0x268	; 0x268 <inicio>
	inicio(0x0C);  //Comando que indica el fabricante del LCD, display encendido
 2f2:	8c e0       	ldi	r24, 0x0C	; 12
 2f4:	0e 94 34 01 	call	0x268	; 0x268 <inicio>
	inicio(0x01);  //Comando que indica el fabricante del LCD, Limpiar LCD
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	0e 94 34 01 	call	0x268	; 0x268 <inicio>
	inicio(0x06);  //Comando que indica el fabricante del LCD, comenzar a almacenar en DDRAM
 2fe:	86 e0       	ldi	r24, 0x06	; 6
 300:	0e 94 34 01 	call	0x268	; 0x268 <inicio>
 304:	08 95       	ret

00000306 <Lcd_Clear>:



void Lcd_Clear()    //Limpia la pantalla LCD
{
	inicio(1);  //Comando dado por el fabricante de la LCD
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	0e 94 34 01 	call	0x268	; 0x268 <inicio>
 30c:	08 95       	ret

0000030e <Lcd_Set_Cursor>:



void Lcd_Set_Cursor(char a, char b)
{
	if(a == 0)
 30e:	81 11       	cpse	r24, r1
 310:	05 c0       	rjmp	.+10     	; 0x31c <Lcd_Set_Cursor+0xe>
		inicio(0x80 + b);  //Posicionarse en la linea 1 y se suma la columna 
 312:	80 e8       	ldi	r24, 0x80	; 128
 314:	86 0f       	add	r24, r22
 316:	0e 94 34 01 	call	0x268	; 0x268 <inicio>
 31a:	08 95       	ret
	
	else if(a == 1)
 31c:	81 30       	cpi	r24, 0x01	; 1
 31e:	21 f4       	brne	.+8      	; 0x328 <Lcd_Set_Cursor+0x1a>
		inicio(0xC0 + b);  //Posicionarse en la linea 2  y se suma la columna
 320:	80 ec       	ldi	r24, 0xC0	; 192
 322:	86 0f       	add	r24, r22
 324:	0e 94 34 01 	call	0x268	; 0x268 <inicio>
 328:	08 95       	ret

0000032a <Lcd_Write_Char>:
}


void Lcd_Write_Char(char data)
{
	PORTB |= (1<<PORTB0);        // RS = 1, se le indica que esta en modo caracter
 32a:	95 b1       	in	r25, 0x05	; 5
 32c:	91 60       	ori	r25, 0x01	; 1
 32e:	95 b9       	out	0x05, r25	; 5
	dato_a_mostrar(data);             //Escribir el caracter
 330:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <dato_a_mostrar>
	PORTB |= (1<<PORTB1);       // E = 1, enviar el dato
 334:	85 b1       	in	r24, 0x05	; 5
 336:	82 60       	ori	r24, 0x02	; 2
 338:	85 b9       	out	0x05, r24	; 5
 33a:	8f e9       	ldi	r24, 0x9F	; 159
 33c:	9f e0       	ldi	r25, 0x0F	; 15
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <Lcd_Write_Char+0x14>
 342:	00 c0       	rjmp	.+0      	; 0x344 <Lcd_Write_Char+0x1a>
 344:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1<<PORTB1);    // E = 0
 346:	85 b1       	in	r24, 0x05	; 5
 348:	8d 7f       	andi	r24, 0xFD	; 253
 34a:	85 b9       	out	0x05, r24	; 5
 34c:	8f e9       	ldi	r24, 0x9F	; 159
 34e:	9f e0       	ldi	r25, 0x0F	; 15
 350:	01 97       	sbiw	r24, 0x01	; 1
 352:	f1 f7       	brne	.-4      	; 0x350 <Lcd_Write_Char+0x26>
 354:	00 c0       	rjmp	.+0      	; 0x356 <Lcd_Write_Char+0x2c>
 356:	00 00       	nop
 358:	08 95       	ret

0000035a <Lcd_Write_String>:
	_delay_ms(1);
}


void Lcd_Write_String(char *a) //Usando punteros, ya que, estos almacenan por ejemplo *dato = hola\0, al final siempre llevan un caracter nulo
{
 35a:	0f 93       	push	r16
 35c:	1f 93       	push	r17
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	8c 01       	movw	r16, r24
	int i;
	for(i=0; a[i]!='\0'; i++)   //Se recorre todo el puntero, hasta que el valor sea nulo 
 364:	c0 e0       	ldi	r28, 0x00	; 0
 366:	d0 e0       	ldi	r29, 0x00	; 0
 368:	03 c0       	rjmp	.+6      	; 0x370 <Lcd_Write_String+0x16>
	Lcd_Write_Char(a[i]);
 36a:	0e 94 95 01 	call	0x32a	; 0x32a <Lcd_Write_Char>


void Lcd_Write_String(char *a) //Usando punteros, ya que, estos almacenan por ejemplo *dato = hola\0, al final siempre llevan un caracter nulo
{
	int i;
	for(i=0; a[i]!='\0'; i++)   //Se recorre todo el puntero, hasta que el valor sea nulo 
 36e:	21 96       	adiw	r28, 0x01	; 1
 370:	f8 01       	movw	r30, r16
 372:	ec 0f       	add	r30, r28
 374:	fd 1f       	adc	r31, r29
 376:	80 81       	ld	r24, Z
 378:	81 11       	cpse	r24, r1
 37a:	f7 cf       	rjmp	.-18     	; 0x36a <Lcd_Write_String+0x10>
	Lcd_Write_Char(a[i]);
}
 37c:	df 91       	pop	r29
 37e:	cf 91       	pop	r28
 380:	1f 91       	pop	r17
 382:	0f 91       	pop	r16
 384:	08 95       	ret

00000386 <setup>:
volatile char receivedChar = 0;    //Variable que almacena el valor del UART


void setup(void);
void setup(void){
	cli();  //Apagar interrupciones
 386:	f8 94       	cli
	DDRD = 0xFF;  //Puerto D como salida
 388:	8f ef       	ldi	r24, 0xFF	; 255
 38a:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;  //Puerto B como salida
 38c:	84 b9       	out	0x04, r24	; 4
	DDRC =0;  //Puerto C como entrada
 38e:	17 b8       	out	0x07, r1	; 7
	
	UCSR0B = 0;  //Usar los pines TX y RX como digitales
 390:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	Lcd_Init8bits();   //Iniciar pantalla LCD
 394:	0e 94 4c 01 	call	0x298	; 0x298 <Lcd_Init8bits>
	Lcd_Clear();
 398:	0e 94 83 01 	call	0x306	; 0x306 <Lcd_Clear>
	
	initADC(); //Iniciar ADC
 39c:	0e 94 cb 00 	call	0x196	; 0x196 <initADC>
	
	initUART9600();  //Iniciar UART
 3a0:	0e 94 15 07 	call	0xe2a	; 0xe2a <initUART9600>
	
	sei(); //Activar interrupciones
 3a4:	78 94       	sei
 3a6:	08 95       	ret

000003a8 <main>:



int main(void)
{
	setup();
 3a8:	0e 94 c3 01 	call	0x386	; 0x386 <setup>
			 _delay_ms(500);
		 }
		 Lcd_Clear();*/
		
		//************MENU*********************************
	if(activa == 0 && menu2 == 0){
 3ac:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <activa>
 3b0:	81 11       	cpse	r24, r1
 3b2:	28 c0       	rjmp	.+80     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3b4:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <menu2>
 3b8:	81 11       	cpse	r24, r1
 3ba:	24 c0       	rjmp	.+72     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
	writeTextUART("\n\r     **************Hola como esta****************");   //Mostrar inicio 
 3bc:	8e e0       	ldi	r24, 0x0E	; 14
 3be:	91 e0       	ldi	r25, 0x01	; 1
 3c0:	0e 94 30 07 	call	0xe60	; 0xe60 <writeTextUART>
	writeUART(10);
 3c4:	8a e0       	ldi	r24, 0x0A	; 10
 3c6:	0e 94 41 07 	call	0xe82	; 0xe82 <writeUART>
	writeUART(13);
 3ca:	8d e0       	ldi	r24, 0x0D	; 13
 3cc:	0e 94 41 07 	call	0xe82	; 0xe82 <writeUART>
	writeUART(10);
 3d0:	8a e0       	ldi	r24, 0x0A	; 10
 3d2:	0e 94 41 07 	call	0xe82	; 0xe82 <writeUART>
	writeTextUART("          Coloque 1 para leer potenciometros");   //Mostrar inicio
 3d6:	82 e4       	ldi	r24, 0x42	; 66
 3d8:	91 e0       	ldi	r25, 0x01	; 1
 3da:	0e 94 30 07 	call	0xe60	; 0xe60 <writeTextUART>
	writeUART(10);
 3de:	8a e0       	ldi	r24, 0x0A	; 10
 3e0:	0e 94 41 07 	call	0xe82	; 0xe82 <writeUART>
	writeUART(13);
 3e4:	8d e0       	ldi	r24, 0x0D	; 13
 3e6:	0e 94 41 07 	call	0xe82	; 0xe82 <writeUART>
	writeTextUART("          Coloque 2 para incrementar contador\n\r");   //Mostrar inicio
 3ea:	8f e6       	ldi	r24, 0x6F	; 111
 3ec:	91 e0       	ldi	r25, 0x01	; 1
 3ee:	0e 94 30 07 	call	0xe60	; 0xe60 <writeTextUART>
	writeUART(10);
 3f2:	8a e0       	ldi	r24, 0x0A	; 10
 3f4:	0e 94 41 07 	call	0xe82	; 0xe82 <writeUART>
	writeUART(13);
 3f8:	8d e0       	ldi	r24, 0x0D	; 13
 3fa:	0e 94 41 07 	call	0xe82	; 0xe82 <writeUART>
	activa = 1;   //Salir del menu 
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <activa>
	}
	
		

		ADCSRA |=(1<<ADSC);  //Leer ADC
 404:	ea e7       	ldi	r30, 0x7A	; 122
 406:	f0 e0       	ldi	r31, 0x00	; 0
 408:	80 81       	ld	r24, Z
 40a:	80 64       	ori	r24, 0x40	; 64
 40c:	80 83       	st	Z, r24
	
		Lcd_Set_Cursor(0,2);  //fila y columna
 40e:	62 e0       	ldi	r22, 0x02	; 2
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	0e 94 87 01 	call	0x30e	; 0x30e <Lcd_Set_Cursor>
		Lcd_Write_String("S1:");
 416:	8f e9       	ldi	r24, 0x9F	; 159
 418:	91 e0       	ldi	r25, 0x01	; 1
 41a:	0e 94 ad 01 	call	0x35a	; 0x35a <Lcd_Write_String>
		Lcd_Set_Cursor(0,7);  //fila y columna
 41e:	67 e0       	ldi	r22, 0x07	; 7
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	0e 94 87 01 	call	0x30e	; 0x30e <Lcd_Set_Cursor>
		Lcd_Write_String("S2:");
 426:	83 ea       	ldi	r24, 0xA3	; 163
 428:	91 e0       	ldi	r25, 0x01	; 1
 42a:	0e 94 ad 01 	call	0x35a	; 0x35a <Lcd_Write_String>
		Lcd_Set_Cursor(0,12);  //fila y columna
 42e:	6c e0       	ldi	r22, 0x0C	; 12
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	0e 94 87 01 	call	0x30e	; 0x30e <Lcd_Set_Cursor>
		Lcd_Write_String("S3:");
 436:	87 ea       	ldi	r24, 0xA7	; 167
 438:	91 e0       	ldi	r25, 0x01	; 1
 43a:	0e 94 ad 01 	call	0x35a	; 0x35a <Lcd_Write_String>
		
		
		Lcd_Set_Cursor(1,2);  //fila y columna
 43e:	62 e0       	ldi	r22, 0x02	; 2
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	0e 94 87 01 	call	0x30e	; 0x30e <Lcd_Set_Cursor>
		Lcd_Write_String(lista1);
 446:	84 e3       	ldi	r24, 0x34	; 52
 448:	92 e0       	ldi	r25, 0x02	; 2
 44a:	0e 94 ad 01 	call	0x35a	; 0x35a <Lcd_Write_String>
		Lcd_Set_Cursor(1,7);  //fila y columna
 44e:	67 e0       	ldi	r22, 0x07	; 7
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	0e 94 87 01 	call	0x30e	; 0x30e <Lcd_Set_Cursor>
		Lcd_Write_String(lista2);
 456:	88 e3       	ldi	r24, 0x38	; 56
 458:	92 e0       	ldi	r25, 0x02	; 2
 45a:	0e 94 ad 01 	call	0x35a	; 0x35a <Lcd_Write_String>
		Lcd_Set_Cursor(1,12);  //fila y columna
 45e:	6c e0       	ldi	r22, 0x0C	; 12
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	0e 94 87 01 	call	0x30e	; 0x30e <Lcd_Set_Cursor>
		Lcd_Write_String(lista3);
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	91 e0       	ldi	r25, 0x01	; 1
 46a:	0e 94 ad 01 	call	0x35a	; 0x35a <Lcd_Write_String>
		

			//Obtener el dato del potenciometro descompuesto, y volverlo char y guardarlo en una lista
			millares = Val2/1000;
 46e:	00 91 32 02 	lds	r16, 0x0232	; 0x800232 <Val2>
 472:	10 e0       	ldi	r17, 0x00	; 0
 474:	28 ee       	ldi	r18, 0xE8	; 232
 476:	33 e0       	ldi	r19, 0x03	; 3
 478:	c8 01       	movw	r24, r16
 47a:	b9 01       	movw	r22, r18
 47c:	0e 94 48 07 	call	0xe90	; 0xe90 <__divmodhi4>
 480:	7b 01       	movw	r14, r22
			centenas = (Val2-(millares*1000))/100;
 482:	48 e1       	ldi	r20, 0x18	; 24
 484:	5c ef       	ldi	r21, 0xFC	; 252
 486:	64 9f       	mul	r22, r20
 488:	c0 01       	movw	r24, r0
 48a:	65 9f       	mul	r22, r21
 48c:	90 0d       	add	r25, r0
 48e:	74 9f       	mul	r23, r20
 490:	90 0d       	add	r25, r0
 492:	11 24       	eor	r1, r1
 494:	80 0f       	add	r24, r16
 496:	91 1f       	adc	r25, r17
 498:	64 e6       	ldi	r22, 0x64	; 100
 49a:	70 e0       	ldi	r23, 0x00	; 0
 49c:	0e 94 48 07 	call	0xe90	; 0xe90 <__divmodhi4>
 4a0:	fb 01       	movw	r30, r22
			decenas = (Val2- (millares*1000 + centenas*100))/10;
 4a2:	e2 9e       	mul	r14, r18
 4a4:	e0 01       	movw	r28, r0
 4a6:	e3 9e       	mul	r14, r19
 4a8:	d0 0d       	add	r29, r0
 4aa:	f2 9e       	mul	r15, r18
 4ac:	d0 0d       	add	r29, r0
 4ae:	11 24       	eor	r1, r1
 4b0:	24 e6       	ldi	r18, 0x64	; 100
 4b2:	26 9f       	mul	r18, r22
 4b4:	c0 01       	movw	r24, r0
 4b6:	27 9f       	mul	r18, r23
 4b8:	90 0d       	add	r25, r0
 4ba:	11 24       	eor	r1, r1
 4bc:	c8 0f       	add	r28, r24
 4be:	d9 1f       	adc	r29, r25
 4c0:	c8 01       	movw	r24, r16
 4c2:	8c 1b       	sub	r24, r28
 4c4:	9d 0b       	sbc	r25, r29
 4c6:	6a e0       	ldi	r22, 0x0A	; 10
 4c8:	70 e0       	ldi	r23, 0x00	; 0
 4ca:	0e 94 48 07 	call	0xe90	; 0xe90 <__divmodhi4>
			unidades = Val2-(millares*1000 + centenas*100 + decenas*10 );
 4ce:	cb 01       	movw	r24, r22
 4d0:	88 0f       	add	r24, r24
 4d2:	99 1f       	adc	r25, r25
 4d4:	9b 01       	movw	r18, r22
 4d6:	22 0f       	add	r18, r18
 4d8:	33 1f       	adc	r19, r19
 4da:	22 0f       	add	r18, r18
 4dc:	33 1f       	adc	r19, r19
 4de:	22 0f       	add	r18, r18
 4e0:	33 1f       	adc	r19, r19
 4e2:	82 0f       	add	r24, r18
 4e4:	93 1f       	adc	r25, r19
 4e6:	8c 0f       	add	r24, r28
 4e8:	9d 1f       	adc	r25, r29
 4ea:	08 1b       	sub	r16, r24
 4ec:	19 0b       	sbc	r17, r25
			
			
			switch(centenas){   //Mostrar centenas
 4ee:	ea 30       	cpi	r30, 0x0A	; 10
 4f0:	f1 05       	cpc	r31, r1
 4f2:	a8 f5       	brcc	.+106    	; 0x55e <__EEPROM_REGION_LENGTH__+0x15e>
 4f4:	ec 5c       	subi	r30, 0xCC	; 204
 4f6:	ff 4f       	sbci	r31, 0xFF	; 255
 4f8:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <__tablejump2__>
				case 0:
					lista1[0] = lista[0];   //almacenar cada valor, en la lista a mostrar en la pantalla
 4fc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <lista>
 500:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <lista1>
				break;
 504:	2c c0       	rjmp	.+88     	; 0x55e <__EEPROM_REGION_LENGTH__+0x15e>
				
				
				case 1:
					lista1[0] = lista[1];
 506:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <lista+0x1>
 50a:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <lista1>
				break;
 50e:	27 c0       	rjmp	.+78     	; 0x55e <__EEPROM_REGION_LENGTH__+0x15e>
				
				case 2:
					lista1[0] = lista[2];
 510:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <lista+0x2>
 514:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <lista1>
				break;
 518:	22 c0       	rjmp	.+68     	; 0x55e <__EEPROM_REGION_LENGTH__+0x15e>
				
				
				case 3:
					lista1[0] = lista[3];
 51a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lista+0x3>
 51e:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <lista1>
				break;
 522:	1d c0       	rjmp	.+58     	; 0x55e <__EEPROM_REGION_LENGTH__+0x15e>
				
				case 4:
					lista1[0] = lista[4];
 524:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <lista+0x4>
 528:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <lista1>
				break;
 52c:	18 c0       	rjmp	.+48     	; 0x55e <__EEPROM_REGION_LENGTH__+0x15e>
				
				
				case 5:
					lista1[0] = lista[5];
 52e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <lista+0x5>
 532:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <lista1>
				break;
 536:	13 c0       	rjmp	.+38     	; 0x55e <__EEPROM_REGION_LENGTH__+0x15e>
				
				
				case 6:
					lista1[0] = lista[6];
 538:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lista+0x6>
 53c:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <lista1>
				break;
 540:	0e c0       	rjmp	.+28     	; 0x55e <__EEPROM_REGION_LENGTH__+0x15e>
				
				
				case 7:
					lista1[0] = lista[7];
 542:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <lista+0x7>
 546:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <lista1>
				break;
 54a:	09 c0       	rjmp	.+18     	; 0x55e <__EEPROM_REGION_LENGTH__+0x15e>
				
				case 8:
					lista1[0] = lista[8];
 54c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <lista+0x8>
 550:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <lista1>
				break;
 554:	04 c0       	rjmp	.+8      	; 0x55e <__EEPROM_REGION_LENGTH__+0x15e>
				
				
				case 9:
					lista1[0] = lista[9];
 556:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <lista+0x9>
 55a:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <lista1>
				break;
				
			}
			
			
			switch(decenas){   //Mostrar decenas
 55e:	6a 30       	cpi	r22, 0x0A	; 10
 560:	71 05       	cpc	r23, r1
 562:	b0 f5       	brcc	.+108    	; 0x5d0 <__EEPROM_REGION_LENGTH__+0x1d0>
 564:	fb 01       	movw	r30, r22
 566:	e2 5c       	subi	r30, 0xC2	; 194
 568:	ff 4f       	sbci	r31, 0xFF	; 255
 56a:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <__tablejump2__>
				case 0:
					lista1[1] = lista[0];
 56e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <lista>
 572:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <lista1+0x1>
				break;
 576:	2c c0       	rjmp	.+88     	; 0x5d0 <__EEPROM_REGION_LENGTH__+0x1d0>
				
				
				case 1:
					lista1[1] = lista[1];
 578:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <lista+0x1>
 57c:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <lista1+0x1>
				break;
 580:	27 c0       	rjmp	.+78     	; 0x5d0 <__EEPROM_REGION_LENGTH__+0x1d0>
				
				case 2:
					lista1[1] = lista[2];
 582:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <lista+0x2>
 586:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <lista1+0x1>
				break;
 58a:	22 c0       	rjmp	.+68     	; 0x5d0 <__EEPROM_REGION_LENGTH__+0x1d0>
				
				
				case 3:
					lista1[1] = lista[3];
 58c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lista+0x3>
 590:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <lista1+0x1>
				break;
 594:	1d c0       	rjmp	.+58     	; 0x5d0 <__EEPROM_REGION_LENGTH__+0x1d0>
				
				case 4:
				lista1[1] = lista[4];
 596:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <lista+0x4>
 59a:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <lista1+0x1>
				break;
 59e:	18 c0       	rjmp	.+48     	; 0x5d0 <__EEPROM_REGION_LENGTH__+0x1d0>
				
				
				case 5:
					lista1[1] = lista[5];
 5a0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <lista+0x5>
 5a4:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <lista1+0x1>
				break;
 5a8:	13 c0       	rjmp	.+38     	; 0x5d0 <__EEPROM_REGION_LENGTH__+0x1d0>
				
				
				case 6:
					lista1[1] = lista[6];
 5aa:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lista+0x6>
 5ae:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <lista1+0x1>
				break;
 5b2:	0e c0       	rjmp	.+28     	; 0x5d0 <__EEPROM_REGION_LENGTH__+0x1d0>
				
				
				case 7:
					lista1[1] = lista[7];
 5b4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <lista+0x7>
 5b8:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <lista1+0x1>
				break;
 5bc:	09 c0       	rjmp	.+18     	; 0x5d0 <__EEPROM_REGION_LENGTH__+0x1d0>
				
				case 8:
					lista1[1] = lista[8];
 5be:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <lista+0x8>
 5c2:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <lista1+0x1>
				break;
 5c6:	04 c0       	rjmp	.+8      	; 0x5d0 <__EEPROM_REGION_LENGTH__+0x1d0>
				
				
				case 9:
					lista1[1] = lista[9];
 5c8:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <lista+0x9>
 5cc:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <lista1+0x1>
				break;
				
			}
			
			switch(unidades){   //Mostrar unidades
 5d0:	0a 30       	cpi	r16, 0x0A	; 10
 5d2:	11 05       	cpc	r17, r1
 5d4:	b0 f5       	brcc	.+108    	; 0x642 <__EEPROM_REGION_LENGTH__+0x242>
 5d6:	f8 01       	movw	r30, r16
 5d8:	e8 5b       	subi	r30, 0xB8	; 184
 5da:	ff 4f       	sbci	r31, 0xFF	; 255
 5dc:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <__tablejump2__>
				case 0:
					lista1[2] = lista[0];
 5e0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <lista>
 5e4:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <lista1+0x2>
				break;
 5e8:	2c c0       	rjmp	.+88     	; 0x642 <__EEPROM_REGION_LENGTH__+0x242>
				
				
				case 1:
					lista1[2] = lista[1];
 5ea:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <lista+0x1>
 5ee:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <lista1+0x2>
				break;
 5f2:	27 c0       	rjmp	.+78     	; 0x642 <__EEPROM_REGION_LENGTH__+0x242>
				
				case 2:
					lista1[2] = lista[2];
 5f4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <lista+0x2>
 5f8:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <lista1+0x2>
				break;
 5fc:	22 c0       	rjmp	.+68     	; 0x642 <__EEPROM_REGION_LENGTH__+0x242>
				
				
				case 3:
					lista1[2] = lista[3];
 5fe:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lista+0x3>
 602:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <lista1+0x2>
				break;
 606:	1d c0       	rjmp	.+58     	; 0x642 <__EEPROM_REGION_LENGTH__+0x242>
				
				case 4:
					lista1[2] = lista[4];
 608:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <lista+0x4>
 60c:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <lista1+0x2>
				break;
 610:	18 c0       	rjmp	.+48     	; 0x642 <__EEPROM_REGION_LENGTH__+0x242>
				
				
				case 5:
					lista1[2] = lista[5];
 612:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <lista+0x5>
 616:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <lista1+0x2>
				break;
 61a:	13 c0       	rjmp	.+38     	; 0x642 <__EEPROM_REGION_LENGTH__+0x242>
				
				
				case 6:
					lista1[2] = lista[6];
 61c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lista+0x6>
 620:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <lista1+0x2>
				break;
 624:	0e c0       	rjmp	.+28     	; 0x642 <__EEPROM_REGION_LENGTH__+0x242>
				
				
				case 7:
					lista1[2] = lista[7];
 626:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <lista+0x7>
 62a:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <lista1+0x2>
				break;
 62e:	09 c0       	rjmp	.+18     	; 0x642 <__EEPROM_REGION_LENGTH__+0x242>
				
				case 8:
					lista1[2] = lista[8];
 630:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <lista+0x8>
 634:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <lista1+0x2>
				break;
 638:	04 c0       	rjmp	.+8      	; 0x642 <__EEPROM_REGION_LENGTH__+0x242>
				
				
				case 9:
					lista1[2] = lista[9];
 63a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <lista+0x9>
 63e:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <lista1+0x2>
			}
			
			
		
			//Obtener el dato del potenciometro descompuesto, y volverlo char y guardarlo en una lista
			millares = Val1/1000;
 642:	20 91 33 02 	lds	r18, 0x0233	; 0x800233 <Val1>
 646:	30 e0       	ldi	r19, 0x00	; 0
 648:	c8 ee       	ldi	r28, 0xE8	; 232
 64a:	d3 e0       	ldi	r29, 0x03	; 3
 64c:	c9 01       	movw	r24, r18
 64e:	be 01       	movw	r22, r28
 650:	0e 94 48 07 	call	0xe90	; 0xe90 <__divmodhi4>
 654:	8b 01       	movw	r16, r22
 656:	70 93 2c 02 	sts	0x022C, r23	; 0x80022c <millares+0x1>
 65a:	60 93 2b 02 	sts	0x022B, r22	; 0x80022b <millares>
			centenas = (Val1-(millares*1000))/100;
 65e:	48 e1       	ldi	r20, 0x18	; 24
 660:	5c ef       	ldi	r21, 0xFC	; 252
 662:	64 9f       	mul	r22, r20
 664:	c0 01       	movw	r24, r0
 666:	65 9f       	mul	r22, r21
 668:	90 0d       	add	r25, r0
 66a:	74 9f       	mul	r23, r20
 66c:	90 0d       	add	r25, r0
 66e:	11 24       	eor	r1, r1
 670:	82 0f       	add	r24, r18
 672:	93 1f       	adc	r25, r19
 674:	64 e6       	ldi	r22, 0x64	; 100
 676:	70 e0       	ldi	r23, 0x00	; 0
 678:	0e 94 48 07 	call	0xe90	; 0xe90 <__divmodhi4>
 67c:	fb 01       	movw	r30, r22
 67e:	70 93 2a 02 	sts	0x022A, r23	; 0x80022a <centenas+0x1>
 682:	60 93 29 02 	sts	0x0229, r22	; 0x800229 <centenas>
			decenas = (Val1- (millares*1000 + centenas*100))/10;
 686:	0c 9f       	mul	r16, r28
 688:	a0 01       	movw	r20, r0
 68a:	0d 9f       	mul	r16, r29
 68c:	50 0d       	add	r21, r0
 68e:	1c 9f       	mul	r17, r28
 690:	50 0d       	add	r21, r0
 692:	11 24       	eor	r1, r1
 694:	64 e6       	ldi	r22, 0x64	; 100
 696:	6e 9f       	mul	r22, r30
 698:	c0 01       	movw	r24, r0
 69a:	6f 9f       	mul	r22, r31
 69c:	90 0d       	add	r25, r0
 69e:	11 24       	eor	r1, r1
 6a0:	ea 01       	movw	r28, r20
 6a2:	c8 0f       	add	r28, r24
 6a4:	d9 1f       	adc	r29, r25
 6a6:	c9 01       	movw	r24, r18
 6a8:	8c 1b       	sub	r24, r28
 6aa:	9d 0b       	sbc	r25, r29
 6ac:	6a e0       	ldi	r22, 0x0A	; 10
 6ae:	70 e0       	ldi	r23, 0x00	; 0
 6b0:	0e 94 48 07 	call	0xe90	; 0xe90 <__divmodhi4>
 6b4:	70 93 28 02 	sts	0x0228, r23	; 0x800228 <decenas+0x1>
 6b8:	60 93 27 02 	sts	0x0227, r22	; 0x800227 <decenas>
			unidades = Val1-(millares*1000 + centenas*100 + decenas*10 );
 6bc:	cb 01       	movw	r24, r22
 6be:	88 0f       	add	r24, r24
 6c0:	99 1f       	adc	r25, r25
 6c2:	ab 01       	movw	r20, r22
 6c4:	44 0f       	add	r20, r20
 6c6:	55 1f       	adc	r21, r21
 6c8:	44 0f       	add	r20, r20
 6ca:	55 1f       	adc	r21, r21
 6cc:	44 0f       	add	r20, r20
 6ce:	55 1f       	adc	r21, r21
 6d0:	84 0f       	add	r24, r20
 6d2:	95 1f       	adc	r25, r21
 6d4:	8c 0f       	add	r24, r28
 6d6:	9d 1f       	adc	r25, r29
 6d8:	28 1b       	sub	r18, r24
 6da:	39 0b       	sbc	r19, r25
 6dc:	30 93 26 02 	sts	0x0226, r19	; 0x800226 <unidades+0x1>
 6e0:	20 93 25 02 	sts	0x0225, r18	; 0x800225 <unidades>
			
			
			switch(centenas){   //Mostrar centenas
 6e4:	ea 30       	cpi	r30, 0x0A	; 10
 6e6:	f1 05       	cpc	r31, r1
 6e8:	a8 f5       	brcc	.+106    	; 0x754 <__EEPROM_REGION_LENGTH__+0x354>
 6ea:	ee 5a       	subi	r30, 0xAE	; 174
 6ec:	ff 4f       	sbci	r31, 0xFF	; 255
 6ee:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <__tablejump2__>
				case 0:
				lista2[0] = lista[0];    //almacenar cada valor, en la lista a mostrar en la pantalla
 6f2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <lista>
 6f6:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <lista2>
				break;
 6fa:	2c c0       	rjmp	.+88     	; 0x754 <__EEPROM_REGION_LENGTH__+0x354>
				
				
				case 1:
				lista2[0] = lista[1];
 6fc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <lista+0x1>
 700:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <lista2>
				break;
 704:	27 c0       	rjmp	.+78     	; 0x754 <__EEPROM_REGION_LENGTH__+0x354>
				
				case 2:
				lista2[0] = lista[2];
 706:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <lista+0x2>
 70a:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <lista2>
				break;
 70e:	22 c0       	rjmp	.+68     	; 0x754 <__EEPROM_REGION_LENGTH__+0x354>
				
				
				case 3:
				lista2[0] = lista[3];
 710:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lista+0x3>
 714:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <lista2>
				break;
 718:	1d c0       	rjmp	.+58     	; 0x754 <__EEPROM_REGION_LENGTH__+0x354>
				
				case 4:
				lista2[0] = lista[4];
 71a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <lista+0x4>
 71e:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <lista2>
				break;
 722:	18 c0       	rjmp	.+48     	; 0x754 <__EEPROM_REGION_LENGTH__+0x354>
				
				
				case 5:
				lista2[0] = lista[5];
 724:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <lista+0x5>
 728:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <lista2>
				break;
 72c:	13 c0       	rjmp	.+38     	; 0x754 <__EEPROM_REGION_LENGTH__+0x354>
				
				
				case 6:
				lista2[0] = lista[6];
 72e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lista+0x6>
 732:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <lista2>
				break;
 736:	0e c0       	rjmp	.+28     	; 0x754 <__EEPROM_REGION_LENGTH__+0x354>
				
				
				case 7:
				lista2[0] = lista[7];
 738:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <lista+0x7>
 73c:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <lista2>
				break;
 740:	09 c0       	rjmp	.+18     	; 0x754 <__EEPROM_REGION_LENGTH__+0x354>
				
				case 8:
				lista2[0] = lista[8];
 742:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <lista+0x8>
 746:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <lista2>
				break;
 74a:	04 c0       	rjmp	.+8      	; 0x754 <__EEPROM_REGION_LENGTH__+0x354>
				
				
				case 9:
				lista2[0] = lista[9];
 74c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <lista+0x9>
 750:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <lista2>
				break;
				
			}
			
			
			switch(decenas){   //Mostrar decenas
 754:	6a 30       	cpi	r22, 0x0A	; 10
 756:	71 05       	cpc	r23, r1
 758:	b0 f5       	brcc	.+108    	; 0x7c6 <__EEPROM_REGION_LENGTH__+0x3c6>
 75a:	fb 01       	movw	r30, r22
 75c:	e4 5a       	subi	r30, 0xA4	; 164
 75e:	ff 4f       	sbci	r31, 0xFF	; 255
 760:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <__tablejump2__>
				case 0:
				lista2[1] = lista[0];
 764:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <lista>
 768:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <lista2+0x1>
				break;
 76c:	2c c0       	rjmp	.+88     	; 0x7c6 <__EEPROM_REGION_LENGTH__+0x3c6>
				
				
				case 1:
				lista2[1] = lista[1];
 76e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <lista+0x1>
 772:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <lista2+0x1>
				break;
 776:	27 c0       	rjmp	.+78     	; 0x7c6 <__EEPROM_REGION_LENGTH__+0x3c6>
				
				case 2:
				lista2[1] = lista[2];
 778:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <lista+0x2>
 77c:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <lista2+0x1>
				break;
 780:	22 c0       	rjmp	.+68     	; 0x7c6 <__EEPROM_REGION_LENGTH__+0x3c6>
				
				
				case 3:
				lista2[1] = lista[3];
 782:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lista+0x3>
 786:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <lista2+0x1>
				break;
 78a:	1d c0       	rjmp	.+58     	; 0x7c6 <__EEPROM_REGION_LENGTH__+0x3c6>
				
				case 4:
				lista2[1] = lista[4];
 78c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <lista+0x4>
 790:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <lista2+0x1>
				break;
 794:	18 c0       	rjmp	.+48     	; 0x7c6 <__EEPROM_REGION_LENGTH__+0x3c6>
				
				
				case 5:
				lista2[1] = lista[5];
 796:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <lista+0x5>
 79a:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <lista2+0x1>
				break;
 79e:	13 c0       	rjmp	.+38     	; 0x7c6 <__EEPROM_REGION_LENGTH__+0x3c6>
				
				
				case 6:
				lista2[1] = lista[6];
 7a0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lista+0x6>
 7a4:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <lista2+0x1>
				break;
 7a8:	0e c0       	rjmp	.+28     	; 0x7c6 <__EEPROM_REGION_LENGTH__+0x3c6>
				
				
				case 7:
				lista2[1] = lista[7];
 7aa:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <lista+0x7>
 7ae:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <lista2+0x1>
				break;
 7b2:	09 c0       	rjmp	.+18     	; 0x7c6 <__EEPROM_REGION_LENGTH__+0x3c6>
				
				case 8:
				lista2[1] = lista[8];
 7b4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <lista+0x8>
 7b8:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <lista2+0x1>
				break;
 7bc:	04 c0       	rjmp	.+8      	; 0x7c6 <__EEPROM_REGION_LENGTH__+0x3c6>
				
				
				case 9:
				lista2[1] = lista[9];
 7be:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <lista+0x9>
 7c2:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <lista2+0x1>
				break;
				
			}
			
			switch(unidades){   //Mostrar unidades
 7c6:	2a 30       	cpi	r18, 0x0A	; 10
 7c8:	31 05       	cpc	r19, r1
 7ca:	b0 f5       	brcc	.+108    	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 7cc:	f9 01       	movw	r30, r18
 7ce:	ea 59       	subi	r30, 0x9A	; 154
 7d0:	ff 4f       	sbci	r31, 0xFF	; 255
 7d2:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <__tablejump2__>
				case 0:
				lista2[2] = lista[0];
 7d6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <lista>
 7da:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <lista2+0x2>
				break;
 7de:	2c c0       	rjmp	.+88     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
				
				
				case 1:
				lista2[2] = lista[1];
 7e0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <lista+0x1>
 7e4:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <lista2+0x2>
				break;
 7e8:	27 c0       	rjmp	.+78     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
				
				case 2:
				lista2[2] = lista[2];
 7ea:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <lista+0x2>
 7ee:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <lista2+0x2>
				break;
 7f2:	22 c0       	rjmp	.+68     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
				
				
				case 3:
				lista2[2] = lista[3];
 7f4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lista+0x3>
 7f8:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <lista2+0x2>
				break;
 7fc:	1d c0       	rjmp	.+58     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
				
				case 4:
				lista2[2] = lista[4];
 7fe:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <lista+0x4>
 802:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <lista2+0x2>
				break;
 806:	18 c0       	rjmp	.+48     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
				
				
				case 5:
				lista2[2] = lista[5];
 808:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <lista+0x5>
 80c:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <lista2+0x2>
				break;
 810:	13 c0       	rjmp	.+38     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
				
				
				case 6:
				lista2[2] = lista[6];
 812:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lista+0x6>
 816:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <lista2+0x2>
				break;
 81a:	0e c0       	rjmp	.+28     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
				
				
				case 7:
				lista2[2] = lista[7];
 81c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <lista+0x7>
 820:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <lista2+0x2>
				break;
 824:	09 c0       	rjmp	.+18     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
				
				case 8:
				lista2[2] = lista[8];
 826:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <lista+0x8>
 82a:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <lista2+0x2>
				break;
 82e:	04 c0       	rjmp	.+8      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
				
				
				case 9:
				lista2[2] = lista[9];
 830:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <lista+0x9>
 834:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <lista2+0x2>
		        //Separar los valores numericos, convertilos en char y guardarlos en una lista
				
		
		
		
			if (receivedChar == '1' && menu2 == 0){   //Si se elige ver los potenciómetros 
 838:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__data_end>
 83c:	81 33       	cpi	r24, 0x31	; 49
 83e:	51 f5       	brne	.+84     	; 0x894 <__DATA_REGION_LENGTH__+0x94>
 840:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <menu2>
 844:	81 11       	cpse	r24, r1
 846:	26 c0       	rjmp	.+76     	; 0x894 <__DATA_REGION_LENGTH__+0x94>
				writeTextUART("Potenciómetro 1: ");   
 848:	8b ea       	ldi	r24, 0xAB	; 171
 84a:	91 e0       	ldi	r25, 0x01	; 1
 84c:	0e 94 30 07 	call	0xe60	; 0xe60 <writeTextUART>
				writeTextUART(lista1);        //Mostrar potenciómetro 1
 850:	84 e3       	ldi	r24, 0x34	; 52
 852:	92 e0       	ldi	r25, 0x02	; 2
 854:	0e 94 30 07 	call	0xe60	; 0xe60 <writeTextUART>
				writeUART(10);
 858:	8a e0       	ldi	r24, 0x0A	; 10
 85a:	0e 94 41 07 	call	0xe82	; 0xe82 <writeUART>
				writeUART(13);
 85e:	8d e0       	ldi	r24, 0x0D	; 13
 860:	0e 94 41 07 	call	0xe82	; 0xe82 <writeUART>
				writeTextUART("Potenciómetro 2: ");
 864:	8d eb       	ldi	r24, 0xBD	; 189
 866:	91 e0       	ldi	r25, 0x01	; 1
 868:	0e 94 30 07 	call	0xe60	; 0xe60 <writeTextUART>
				writeTextUART(lista2);               //Mostrar potenciómetro 2
 86c:	88 e3       	ldi	r24, 0x38	; 56
 86e:	92 e0       	ldi	r25, 0x02	; 2
 870:	0e 94 30 07 	call	0xe60	; 0xe60 <writeTextUART>
				writeUART(10);
 874:	8a e0       	ldi	r24, 0x0A	; 10
 876:	0e 94 41 07 	call	0xe82	; 0xe82 <writeUART>
				writeUART(13);
 87a:	8d e0       	ldi	r24, 0x0D	; 13
 87c:	0e 94 41 07 	call	0xe82	; 0xe82 <writeUART>
				writeUART(10);
 880:	8a e0       	ldi	r24, 0x0A	; 10
 882:	0e 94 41 07 	call	0xe82	; 0xe82 <writeUART>
				writeUART(13);
 886:	8d e0       	ldi	r24, 0x0D	; 13
 888:	0e 94 41 07 	call	0xe82	; 0xe82 <writeUART>
				receivedChar = 0;
 88c:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <__data_end>
				activa = 0;
 890:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <activa>
			}
			

			
			if (receivedChar == '2' ){   //Si se elige modificar el valor del contador
 894:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__data_end>
 898:	82 33       	cpi	r24, 0x32	; 50
 89a:	a9 f4       	brne	.+42     	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
				menu2 = 1;
 89c:	81 e0       	ldi	r24, 0x01	; 1
 89e:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <menu2>
				writeTextUART("Presione + para incrementar, - para decrementar, e para menu principal \n\r");
 8a2:	8f ec       	ldi	r24, 0xCF	; 207
 8a4:	91 e0       	ldi	r25, 0x01	; 1
 8a6:	0e 94 30 07 	call	0xe60	; 0xe60 <writeTextUART>
				writeUART(10);
 8aa:	8a e0       	ldi	r24, 0x0A	; 10
 8ac:	0e 94 41 07 	call	0xe82	; 0xe82 <writeUART>
				writeUART(13);
 8b0:	8d e0       	ldi	r24, 0x0D	; 13
 8b2:	0e 94 41 07 	call	0xe82	; 0xe82 <writeUART>
				writeUART(10);
 8b6:	8a e0       	ldi	r24, 0x0A	; 10
 8b8:	0e 94 41 07 	call	0xe82	; 0xe82 <writeUART>
				writeUART(13);
 8bc:	8d e0       	ldi	r24, 0x0D	; 13
 8be:	0e 94 41 07 	call	0xe82	; 0xe82 <writeUART>
				
				receivedChar = 0;
 8c2:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <__data_end>
			}
			
			if (receivedChar == '+' && menu2 == 1){
 8c6:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__data_end>
 8ca:	8b 32       	cpi	r24, 0x2B	; 43
 8cc:	09 f0       	breq	.+2      	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
 8ce:	27 c1       	rjmp	.+590    	; 0xb1e <__stack+0x21f>
 8d0:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <menu2>
 8d4:	81 30       	cpi	r24, 0x01	; 1
 8d6:	09 f0       	breq	.+2      	; 0x8da <__DATA_REGION_LENGTH__+0xda>
 8d8:	22 c1       	rjmp	.+580    	; 0xb1e <__stack+0x21f>
				if (cambio >= 255)    //si el contador es mayor de 255, dejarlo en 255
 8da:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <cambio>
 8de:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <cambio+0x1>
 8e2:	8f 3f       	cpi	r24, 0xFF	; 255
 8e4:	91 05       	cpc	r25, r1
 8e6:	34 f0       	brlt	.+12     	; 0x8f4 <__DATA_REGION_LENGTH__+0xf4>
				{
					cambio = 255;
 8e8:	8f ef       	ldi	r24, 0xFF	; 255
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	90 93 2e 02 	sts	0x022E, r25	; 0x80022e <cambio+0x1>
 8f0:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <cambio>
				}
				
				millares = cambio/1000;
 8f4:	20 91 2d 02 	lds	r18, 0x022D	; 0x80022d <cambio>
 8f8:	30 91 2e 02 	lds	r19, 0x022E	; 0x80022e <cambio+0x1>
 8fc:	c8 ee       	ldi	r28, 0xE8	; 232
 8fe:	d3 e0       	ldi	r29, 0x03	; 3
 900:	c9 01       	movw	r24, r18
 902:	be 01       	movw	r22, r28
 904:	0e 94 48 07 	call	0xe90	; 0xe90 <__divmodhi4>
 908:	8b 01       	movw	r16, r22
 90a:	70 93 2c 02 	sts	0x022C, r23	; 0x80022c <millares+0x1>
 90e:	60 93 2b 02 	sts	0x022B, r22	; 0x80022b <millares>
				centenas = (cambio-(millares*1000))/100;
 912:	48 e1       	ldi	r20, 0x18	; 24
 914:	5c ef       	ldi	r21, 0xFC	; 252
 916:	64 9f       	mul	r22, r20
 918:	c0 01       	movw	r24, r0
 91a:	65 9f       	mul	r22, r21
 91c:	90 0d       	add	r25, r0
 91e:	74 9f       	mul	r23, r20
 920:	90 0d       	add	r25, r0
 922:	11 24       	eor	r1, r1
 924:	82 0f       	add	r24, r18
 926:	93 1f       	adc	r25, r19
 928:	64 e6       	ldi	r22, 0x64	; 100
 92a:	70 e0       	ldi	r23, 0x00	; 0
 92c:	0e 94 48 07 	call	0xe90	; 0xe90 <__divmodhi4>
 930:	fb 01       	movw	r30, r22
 932:	70 93 2a 02 	sts	0x022A, r23	; 0x80022a <centenas+0x1>
 936:	60 93 29 02 	sts	0x0229, r22	; 0x800229 <centenas>
				decenas = (cambio- (millares*1000 + centenas*100))/10;
 93a:	0c 9f       	mul	r16, r28
 93c:	a0 01       	movw	r20, r0
 93e:	0d 9f       	mul	r16, r29
 940:	50 0d       	add	r21, r0
 942:	1c 9f       	mul	r17, r28
 944:	50 0d       	add	r21, r0
 946:	11 24       	eor	r1, r1
 948:	64 e6       	ldi	r22, 0x64	; 100
 94a:	6e 9f       	mul	r22, r30
 94c:	c0 01       	movw	r24, r0
 94e:	6f 9f       	mul	r22, r31
 950:	90 0d       	add	r25, r0
 952:	11 24       	eor	r1, r1
 954:	ea 01       	movw	r28, r20
 956:	c8 0f       	add	r28, r24
 958:	d9 1f       	adc	r29, r25
 95a:	c9 01       	movw	r24, r18
 95c:	8c 1b       	sub	r24, r28
 95e:	9d 0b       	sbc	r25, r29
 960:	6a e0       	ldi	r22, 0x0A	; 10
 962:	70 e0       	ldi	r23, 0x00	; 0
 964:	0e 94 48 07 	call	0xe90	; 0xe90 <__divmodhi4>
 968:	70 93 28 02 	sts	0x0228, r23	; 0x800228 <decenas+0x1>
 96c:	60 93 27 02 	sts	0x0227, r22	; 0x800227 <decenas>
				unidades = cambio-(millares*1000 + centenas*100 + decenas*10 );
 970:	cb 01       	movw	r24, r22
 972:	88 0f       	add	r24, r24
 974:	99 1f       	adc	r25, r25
 976:	ab 01       	movw	r20, r22
 978:	44 0f       	add	r20, r20
 97a:	55 1f       	adc	r21, r21
 97c:	44 0f       	add	r20, r20
 97e:	55 1f       	adc	r21, r21
 980:	44 0f       	add	r20, r20
 982:	55 1f       	adc	r21, r21
 984:	84 0f       	add	r24, r20
 986:	95 1f       	adc	r25, r21
 988:	8c 0f       	add	r24, r28
 98a:	9d 1f       	adc	r25, r29
 98c:	28 1b       	sub	r18, r24
 98e:	39 0b       	sbc	r19, r25
 990:	30 93 26 02 	sts	0x0226, r19	; 0x800226 <unidades+0x1>
 994:	20 93 25 02 	sts	0x0225, r18	; 0x800225 <unidades>
				
				
				switch(centenas){   //Mostrar centenas
 998:	ea 30       	cpi	r30, 0x0A	; 10
 99a:	f1 05       	cpc	r31, r1
 99c:	a8 f5       	brcc	.+106    	; 0xa08 <__stack+0x109>
 99e:	e0 59       	subi	r30, 0x90	; 144
 9a0:	ff 4f       	sbci	r31, 0xFF	; 255
 9a2:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <__tablejump2__>
					case 0:
					lista3[0] = lista[0];    //almacenar cada valor, en la lista a mostrar en la pantalla
 9a6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <lista>
 9aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
					break;
 9ae:	2c c0       	rjmp	.+88     	; 0xa08 <__stack+0x109>
					
					
					case 1:
					lista3[0] = lista[1];
 9b0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <lista+0x1>
 9b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
					break;
 9b8:	27 c0       	rjmp	.+78     	; 0xa08 <__stack+0x109>
					
					case 2:
					lista3[0] = lista[2];
 9ba:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <lista+0x2>
 9be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
					break;
 9c2:	22 c0       	rjmp	.+68     	; 0xa08 <__stack+0x109>
					
					
					case 3:
					lista3[0] = lista[3];
 9c4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lista+0x3>
 9c8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
					break;
 9cc:	1d c0       	rjmp	.+58     	; 0xa08 <__stack+0x109>
					
					case 4:
					lista3[0] = lista[4];
 9ce:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <lista+0x4>
 9d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
					break;
 9d6:	18 c0       	rjmp	.+48     	; 0xa08 <__stack+0x109>
					
					
					case 5:
					lista3[0] = lista[5];
 9d8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <lista+0x5>
 9dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
					break;
 9e0:	13 c0       	rjmp	.+38     	; 0xa08 <__stack+0x109>
					
					
					case 6:
					lista3[0] = lista[6];
 9e2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lista+0x6>
 9e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
					break;
 9ea:	0e c0       	rjmp	.+28     	; 0xa08 <__stack+0x109>
					
					
					case 7:
					lista3[0] = lista[7];
 9ec:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <lista+0x7>
 9f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
					break;
 9f4:	09 c0       	rjmp	.+18     	; 0xa08 <__stack+0x109>
					
					case 8:
					lista3[0] = lista[8];
 9f6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <lista+0x8>
 9fa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
					break;
 9fe:	04 c0       	rjmp	.+8      	; 0xa08 <__stack+0x109>
					
					
					case 9:
					lista3[0] = lista[9];
 a00:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <lista+0x9>
 a04:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
					break;
					
				}
				
				
				switch(decenas){   //Mostrar decenas
 a08:	6a 30       	cpi	r22, 0x0A	; 10
 a0a:	71 05       	cpc	r23, r1
 a0c:	b0 f5       	brcc	.+108    	; 0xa7a <__stack+0x17b>
 a0e:	fb 01       	movw	r30, r22
 a10:	e6 58       	subi	r30, 0x86	; 134
 a12:	ff 4f       	sbci	r31, 0xFF	; 255
 a14:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <__tablejump2__>
					case 0:
					lista3[1] = lista[0];
 a18:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <lista>
 a1c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
					break;
 a20:	2c c0       	rjmp	.+88     	; 0xa7a <__stack+0x17b>
					
					
					case 1:
					lista3[1] = lista[1];
 a22:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <lista+0x1>
 a26:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
					break;
 a2a:	27 c0       	rjmp	.+78     	; 0xa7a <__stack+0x17b>
					
					case 2:
					lista3[1] = lista[2];
 a2c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <lista+0x2>
 a30:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
					break;
 a34:	22 c0       	rjmp	.+68     	; 0xa7a <__stack+0x17b>
					
					
					case 3:
					lista3[1] = lista[3];
 a36:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lista+0x3>
 a3a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
					break;
 a3e:	1d c0       	rjmp	.+58     	; 0xa7a <__stack+0x17b>
					
					case 4:
					lista3[1] = lista[4];
 a40:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <lista+0x4>
 a44:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
					break;
 a48:	18 c0       	rjmp	.+48     	; 0xa7a <__stack+0x17b>
					
					
					case 5:
					lista3[1] = lista[5];
 a4a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <lista+0x5>
 a4e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
					break;
 a52:	13 c0       	rjmp	.+38     	; 0xa7a <__stack+0x17b>
					
					
					case 6:
					lista3[1] = lista[6];
 a54:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lista+0x6>
 a58:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
					break;
 a5c:	0e c0       	rjmp	.+28     	; 0xa7a <__stack+0x17b>
					
					
					case 7:
					lista3[1] = lista[7];
 a5e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <lista+0x7>
 a62:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
					break;
 a66:	09 c0       	rjmp	.+18     	; 0xa7a <__stack+0x17b>
					
					case 8:
					lista3[1] = lista[8];
 a68:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <lista+0x8>
 a6c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
					break;
 a70:	04 c0       	rjmp	.+8      	; 0xa7a <__stack+0x17b>
					
					
					case 9:
					lista3[1] = lista[9];
 a72:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <lista+0x9>
 a76:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
					break;
					
				}
				
				switch(unidades){   //Mostrar unidades
 a7a:	2a 30       	cpi	r18, 0x0A	; 10
 a7c:	31 05       	cpc	r19, r1
 a7e:	b0 f5       	brcc	.+108    	; 0xaec <__stack+0x1ed>
 a80:	f9 01       	movw	r30, r18
 a82:	ec 57       	subi	r30, 0x7C	; 124
 a84:	ff 4f       	sbci	r31, 0xFF	; 255
 a86:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <__tablejump2__>
					case 0:
					lista3[2] = lista[0];   //Almacenar los valores del contador
 a8a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <lista>
 a8e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
					break;
 a92:	2c c0       	rjmp	.+88     	; 0xaec <__stack+0x1ed>
					
					
					case 1:
					lista3[2] = lista[1];
 a94:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <lista+0x1>
 a98:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
					break;
 a9c:	27 c0       	rjmp	.+78     	; 0xaec <__stack+0x1ed>
					
					case 2:
					lista3[2] = lista[2];
 a9e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <lista+0x2>
 aa2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
					break;
 aa6:	22 c0       	rjmp	.+68     	; 0xaec <__stack+0x1ed>
					
					
					case 3:
					lista3[2] = lista[3];
 aa8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lista+0x3>
 aac:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
					break;
 ab0:	1d c0       	rjmp	.+58     	; 0xaec <__stack+0x1ed>
					
					case 4:
					lista3[2] = lista[4];
 ab2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <lista+0x4>
 ab6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
					break;
 aba:	18 c0       	rjmp	.+48     	; 0xaec <__stack+0x1ed>
					
					
					case 5:
					lista3[2] = lista[5];
 abc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <lista+0x5>
 ac0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
					break;
 ac4:	13 c0       	rjmp	.+38     	; 0xaec <__stack+0x1ed>
					
					
					case 6:
					lista3[2] = lista[6];
 ac6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lista+0x6>
 aca:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
					break;
 ace:	0e c0       	rjmp	.+28     	; 0xaec <__stack+0x1ed>
					
					
					case 7:
					lista3[2] = lista[7];
 ad0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <lista+0x7>
 ad4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
					break;
 ad8:	09 c0       	rjmp	.+18     	; 0xaec <__stack+0x1ed>
					
					case 8:
					lista3[2] = lista[8];
 ada:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <lista+0x8>
 ade:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
					break;
 ae2:	04 c0       	rjmp	.+8      	; 0xaec <__stack+0x1ed>
					
					
					case 9:
					lista3[2] = lista[9];
 ae4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <lista+0x9>
 ae8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
					break;
				}
					writeTextUART("Contador: ");    //Mostrar el valor del contador 3
 aec:	89 e1       	ldi	r24, 0x19	; 25
 aee:	92 e0       	ldi	r25, 0x02	; 2
 af0:	0e 94 30 07 	call	0xe60	; 0xe60 <writeTextUART>
					writeTextUART(lista3);
 af4:	80 e0       	ldi	r24, 0x00	; 0
 af6:	91 e0       	ldi	r25, 0x01	; 1
 af8:	0e 94 30 07 	call	0xe60	; 0xe60 <writeTextUART>
					writeUART(10);
 afc:	8a e0       	ldi	r24, 0x0A	; 10
 afe:	0e 94 41 07 	call	0xe82	; 0xe82 <writeUART>
					writeUART(13);
 b02:	8d e0       	ldi	r24, 0x0D	; 13
 b04:	0e 94 41 07 	call	0xe82	; 0xe82 <writeUART>
				receivedChar = 0;
 b08:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <__data_end>
				cambio ++;         //Incrementar el tercer contador
 b0c:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <cambio>
 b10:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <cambio+0x1>
 b14:	01 96       	adiw	r24, 0x01	; 1
 b16:	90 93 2e 02 	sts	0x022E, r25	; 0x80022e <cambio+0x1>
 b1a:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <cambio>
			}
			
			
			if (receivedChar == '-' && menu2 == 1){
 b1e:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__data_end>
 b22:	8d 32       	cpi	r24, 0x2D	; 45
 b24:	09 f0       	breq	.+2      	; 0xb28 <__stack+0x229>
 b26:	25 c1       	rjmp	.+586    	; 0xd72 <__stack+0x473>
 b28:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <menu2>
 b2c:	81 30       	cpi	r24, 0x01	; 1
 b2e:	09 f0       	breq	.+2      	; 0xb32 <__stack+0x233>
 b30:	20 c1       	rjmp	.+576    	; 0xd72 <__stack+0x473>
			
				if (cambio <= 0)    //si el contador es menor de 0, dejarlo en 0
 b32:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <cambio>
 b36:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <cambio+0x1>
 b3a:	18 16       	cp	r1, r24
 b3c:	19 06       	cpc	r1, r25
 b3e:	24 f0       	brlt	.+8      	; 0xb48 <__stack+0x249>
				{
					cambio = 0;
 b40:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <cambio+0x1>
 b44:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <cambio>
				}
				
				millares = cambio/1000;
 b48:	20 91 2d 02 	lds	r18, 0x022D	; 0x80022d <cambio>
 b4c:	30 91 2e 02 	lds	r19, 0x022E	; 0x80022e <cambio+0x1>
 b50:	c8 ee       	ldi	r28, 0xE8	; 232
 b52:	d3 e0       	ldi	r29, 0x03	; 3
 b54:	c9 01       	movw	r24, r18
 b56:	be 01       	movw	r22, r28
 b58:	0e 94 48 07 	call	0xe90	; 0xe90 <__divmodhi4>
 b5c:	8b 01       	movw	r16, r22
 b5e:	70 93 2c 02 	sts	0x022C, r23	; 0x80022c <millares+0x1>
 b62:	60 93 2b 02 	sts	0x022B, r22	; 0x80022b <millares>
				centenas = (cambio-(millares*1000))/100;
 b66:	48 e1       	ldi	r20, 0x18	; 24
 b68:	5c ef       	ldi	r21, 0xFC	; 252
 b6a:	64 9f       	mul	r22, r20
 b6c:	c0 01       	movw	r24, r0
 b6e:	65 9f       	mul	r22, r21
 b70:	90 0d       	add	r25, r0
 b72:	74 9f       	mul	r23, r20
 b74:	90 0d       	add	r25, r0
 b76:	11 24       	eor	r1, r1
 b78:	82 0f       	add	r24, r18
 b7a:	93 1f       	adc	r25, r19
 b7c:	64 e6       	ldi	r22, 0x64	; 100
 b7e:	70 e0       	ldi	r23, 0x00	; 0
 b80:	0e 94 48 07 	call	0xe90	; 0xe90 <__divmodhi4>
 b84:	fb 01       	movw	r30, r22
 b86:	70 93 2a 02 	sts	0x022A, r23	; 0x80022a <centenas+0x1>
 b8a:	60 93 29 02 	sts	0x0229, r22	; 0x800229 <centenas>
				decenas = (cambio- (millares*1000 + centenas*100))/10;
 b8e:	0c 9f       	mul	r16, r28
 b90:	a0 01       	movw	r20, r0
 b92:	0d 9f       	mul	r16, r29
 b94:	50 0d       	add	r21, r0
 b96:	1c 9f       	mul	r17, r28
 b98:	50 0d       	add	r21, r0
 b9a:	11 24       	eor	r1, r1
 b9c:	64 e6       	ldi	r22, 0x64	; 100
 b9e:	6e 9f       	mul	r22, r30
 ba0:	c0 01       	movw	r24, r0
 ba2:	6f 9f       	mul	r22, r31
 ba4:	90 0d       	add	r25, r0
 ba6:	11 24       	eor	r1, r1
 ba8:	ea 01       	movw	r28, r20
 baa:	c8 0f       	add	r28, r24
 bac:	d9 1f       	adc	r29, r25
 bae:	c9 01       	movw	r24, r18
 bb0:	8c 1b       	sub	r24, r28
 bb2:	9d 0b       	sbc	r25, r29
 bb4:	6a e0       	ldi	r22, 0x0A	; 10
 bb6:	70 e0       	ldi	r23, 0x00	; 0
 bb8:	0e 94 48 07 	call	0xe90	; 0xe90 <__divmodhi4>
 bbc:	70 93 28 02 	sts	0x0228, r23	; 0x800228 <decenas+0x1>
 bc0:	60 93 27 02 	sts	0x0227, r22	; 0x800227 <decenas>
				unidades = cambio-(millares*1000 + centenas*100 + decenas*10 );
 bc4:	cb 01       	movw	r24, r22
 bc6:	88 0f       	add	r24, r24
 bc8:	99 1f       	adc	r25, r25
 bca:	ab 01       	movw	r20, r22
 bcc:	44 0f       	add	r20, r20
 bce:	55 1f       	adc	r21, r21
 bd0:	44 0f       	add	r20, r20
 bd2:	55 1f       	adc	r21, r21
 bd4:	44 0f       	add	r20, r20
 bd6:	55 1f       	adc	r21, r21
 bd8:	84 0f       	add	r24, r20
 bda:	95 1f       	adc	r25, r21
 bdc:	8c 0f       	add	r24, r28
 bde:	9d 1f       	adc	r25, r29
 be0:	28 1b       	sub	r18, r24
 be2:	39 0b       	sbc	r19, r25
 be4:	30 93 26 02 	sts	0x0226, r19	; 0x800226 <unidades+0x1>
 be8:	20 93 25 02 	sts	0x0225, r18	; 0x800225 <unidades>
				
				
				switch(centenas){   //Mostrar centenas
 bec:	ea 30       	cpi	r30, 0x0A	; 10
 bee:	f1 05       	cpc	r31, r1
 bf0:	a8 f5       	brcc	.+106    	; 0xc5c <__stack+0x35d>
 bf2:	e2 57       	subi	r30, 0x72	; 114
 bf4:	ff 4f       	sbci	r31, 0xFF	; 255
 bf6:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <__tablejump2__>
					case 0:
					lista3[0] = lista[0];    //almacenar cada valor, en la lista a mostrar en la pantalla
 bfa:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <lista>
 bfe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
					break;
 c02:	2c c0       	rjmp	.+88     	; 0xc5c <__stack+0x35d>
					
					
					case 1:
					lista3[0] = lista[1];
 c04:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <lista+0x1>
 c08:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
					break;
 c0c:	27 c0       	rjmp	.+78     	; 0xc5c <__stack+0x35d>
					
					case 2:
					lista3[0] = lista[2];
 c0e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <lista+0x2>
 c12:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
					break;
 c16:	22 c0       	rjmp	.+68     	; 0xc5c <__stack+0x35d>
					
					
					case 3:
					lista3[0] = lista[3];
 c18:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lista+0x3>
 c1c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
					break;
 c20:	1d c0       	rjmp	.+58     	; 0xc5c <__stack+0x35d>
					
					case 4:
					lista3[0] = lista[4];
 c22:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <lista+0x4>
 c26:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
					break;
 c2a:	18 c0       	rjmp	.+48     	; 0xc5c <__stack+0x35d>
					
					
					case 5:
					lista3[0] = lista[5];
 c2c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <lista+0x5>
 c30:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
					break;
 c34:	13 c0       	rjmp	.+38     	; 0xc5c <__stack+0x35d>
					
					
					case 6:
					lista3[0] = lista[6];
 c36:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lista+0x6>
 c3a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
					break;
 c3e:	0e c0       	rjmp	.+28     	; 0xc5c <__stack+0x35d>
					
					
					case 7:
					lista3[0] = lista[7];
 c40:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <lista+0x7>
 c44:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
					break;
 c48:	09 c0       	rjmp	.+18     	; 0xc5c <__stack+0x35d>
					
					case 8:
					lista3[0] = lista[8];
 c4a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <lista+0x8>
 c4e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
					break;
 c52:	04 c0       	rjmp	.+8      	; 0xc5c <__stack+0x35d>
					
					
					case 9:
					lista3[0] = lista[9];
 c54:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <lista+0x9>
 c58:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
					break;
					
				}
				
				
				switch(decenas){   //Mostrar decenas
 c5c:	6a 30       	cpi	r22, 0x0A	; 10
 c5e:	71 05       	cpc	r23, r1
 c60:	b0 f5       	brcc	.+108    	; 0xcce <__stack+0x3cf>
 c62:	fb 01       	movw	r30, r22
 c64:	e8 56       	subi	r30, 0x68	; 104
 c66:	ff 4f       	sbci	r31, 0xFF	; 255
 c68:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <__tablejump2__>
					case 0:
					lista3[1] = lista[0];
 c6c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <lista>
 c70:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
					break;
 c74:	2c c0       	rjmp	.+88     	; 0xcce <__stack+0x3cf>
					
					
					case 1:
					lista3[1] = lista[1];
 c76:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <lista+0x1>
 c7a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
					break;
 c7e:	27 c0       	rjmp	.+78     	; 0xcce <__stack+0x3cf>
					
					case 2:
					lista3[1] = lista[2];
 c80:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <lista+0x2>
 c84:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
					break;
 c88:	22 c0       	rjmp	.+68     	; 0xcce <__stack+0x3cf>
					
					
					case 3:
					lista3[1] = lista[3];
 c8a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lista+0x3>
 c8e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
					break;
 c92:	1d c0       	rjmp	.+58     	; 0xcce <__stack+0x3cf>
					
					case 4:
					lista3[1] = lista[4];
 c94:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <lista+0x4>
 c98:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
					break;
 c9c:	18 c0       	rjmp	.+48     	; 0xcce <__stack+0x3cf>
					
					
					case 5:
					lista3[1] = lista[5];
 c9e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <lista+0x5>
 ca2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
					break;
 ca6:	13 c0       	rjmp	.+38     	; 0xcce <__stack+0x3cf>
					
					
					case 6:
					lista3[1] = lista[6];
 ca8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lista+0x6>
 cac:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
					break;
 cb0:	0e c0       	rjmp	.+28     	; 0xcce <__stack+0x3cf>
					
					
					case 7:
					lista3[1] = lista[7];
 cb2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <lista+0x7>
 cb6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
					break;
 cba:	09 c0       	rjmp	.+18     	; 0xcce <__stack+0x3cf>
					
					case 8:
					lista3[1] = lista[8];
 cbc:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <lista+0x8>
 cc0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
					break;
 cc4:	04 c0       	rjmp	.+8      	; 0xcce <__stack+0x3cf>
					
					
					case 9:
					lista3[1] = lista[9];
 cc6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <lista+0x9>
 cca:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
					break;
					
				}
				
				switch(unidades){   //Mostrar unidades
 cce:	2a 30       	cpi	r18, 0x0A	; 10
 cd0:	31 05       	cpc	r19, r1
 cd2:	b0 f5       	brcc	.+108    	; 0xd40 <__stack+0x441>
 cd4:	f9 01       	movw	r30, r18
 cd6:	ee 55       	subi	r30, 0x5E	; 94
 cd8:	ff 4f       	sbci	r31, 0xFF	; 255
 cda:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <__tablejump2__>
					case 0:
					lista3[2] = lista[0];   //Almacenar los valores del contador
 cde:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <lista>
 ce2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
					break;
 ce6:	2c c0       	rjmp	.+88     	; 0xd40 <__stack+0x441>
					
					
					case 1:
					lista3[2] = lista[1];
 ce8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <lista+0x1>
 cec:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
					break;
 cf0:	27 c0       	rjmp	.+78     	; 0xd40 <__stack+0x441>
					
					case 2:
					lista3[2] = lista[2];
 cf2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <lista+0x2>
 cf6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
					break;
 cfa:	22 c0       	rjmp	.+68     	; 0xd40 <__stack+0x441>
					
					
					case 3:
					lista3[2] = lista[3];
 cfc:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lista+0x3>
 d00:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
					break;
 d04:	1d c0       	rjmp	.+58     	; 0xd40 <__stack+0x441>
					
					case 4:
					lista3[2] = lista[4];
 d06:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <lista+0x4>
 d0a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
					break;
 d0e:	18 c0       	rjmp	.+48     	; 0xd40 <__stack+0x441>
					
					
					case 5:
					lista3[2] = lista[5];
 d10:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <lista+0x5>
 d14:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
					break;
 d18:	13 c0       	rjmp	.+38     	; 0xd40 <__stack+0x441>
					
					
					case 6:
					lista3[2] = lista[6];
 d1a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lista+0x6>
 d1e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
					break;
 d22:	0e c0       	rjmp	.+28     	; 0xd40 <__stack+0x441>
					
					
					case 7:
					lista3[2] = lista[7];
 d24:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <lista+0x7>
 d28:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
					break;
 d2c:	09 c0       	rjmp	.+18     	; 0xd40 <__stack+0x441>
					
					case 8:
					lista3[2] = lista[8];
 d2e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <lista+0x8>
 d32:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
					break;
 d36:	04 c0       	rjmp	.+8      	; 0xd40 <__stack+0x441>
					
					
					case 9:
					lista3[2] = lista[9];
 d38:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <lista+0x9>
 d3c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
					break;
				}
				
				writeTextUART("Contador: ");    //Mostrar el valor del contador 3
 d40:	89 e1       	ldi	r24, 0x19	; 25
 d42:	92 e0       	ldi	r25, 0x02	; 2
 d44:	0e 94 30 07 	call	0xe60	; 0xe60 <writeTextUART>
				writeTextUART(lista3);
 d48:	80 e0       	ldi	r24, 0x00	; 0
 d4a:	91 e0       	ldi	r25, 0x01	; 1
 d4c:	0e 94 30 07 	call	0xe60	; 0xe60 <writeTextUART>
				writeUART(10);
 d50:	8a e0       	ldi	r24, 0x0A	; 10
 d52:	0e 94 41 07 	call	0xe82	; 0xe82 <writeUART>
				writeUART(13);
 d56:	8d e0       	ldi	r24, 0x0D	; 13
 d58:	0e 94 41 07 	call	0xe82	; 0xe82 <writeUART>
				receivedChar = 0;
 d5c:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <__data_end>
				cambio --;  //Decrementar el valor del contador
 d60:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <cambio>
 d64:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <cambio+0x1>
 d68:	01 97       	sbiw	r24, 0x01	; 1
 d6a:	90 93 2e 02 	sts	0x022E, r25	; 0x80022e <cambio+0x1>
 d6e:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <cambio>
			}
			
			
			
			if (receivedChar == 'e' && menu2 == 1){  //Volver al menu principal 
 d72:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__data_end>
 d76:	85 36       	cpi	r24, 0x65	; 101
 d78:	09 f0       	breq	.+2      	; 0xd7c <__stack+0x47d>
 d7a:	18 cb       	rjmp	.-2512   	; 0x3ac <main+0x4>
 d7c:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <menu2>
 d80:	81 30       	cpi	r24, 0x01	; 1
 d82:	09 f0       	breq	.+2      	; 0xd86 <__stack+0x487>
 d84:	13 cb       	rjmp	.-2522   	; 0x3ac <main+0x4>
				receivedChar = 0;
 d86:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <__data_end>
				activa = 0;    //Regresar al menu principal  
 d8a:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <activa>
				menu2 = 0;   //Activaar el menu principal
 d8e:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <menu2>
 d92:	0c cb       	rjmp	.-2536   	; 0x3ac <main+0x4>

00000d94 <__vector_21>:
    }
}



ISR(ADC_vect){
 d94:	1f 92       	push	r1
 d96:	0f 92       	push	r0
 d98:	0f b6       	in	r0, 0x3f	; 63
 d9a:	0f 92       	push	r0
 d9c:	11 24       	eor	r1, r1
 d9e:	8f 93       	push	r24
 da0:	ef 93       	push	r30
 da2:	ff 93       	push	r31
	
	switch (caso){
 da4:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <caso>
 da8:	88 23       	and	r24, r24
 daa:	19 f0       	breq	.+6      	; 0xdb2 <__vector_21+0x1e>
 dac:	81 30       	cpi	r24, 0x01	; 1
 dae:	71 f0       	breq	.+28     	; 0xdcc <__vector_21+0x38>
 db0:	1b c0       	rjmp	.+54     	; 0xde8 <__vector_21+0x54>
		case 0:
		ADMUX &= ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0)); //Borrar configuracion actual y poner ADC1
 db2:	ec e7       	ldi	r30, 0x7C	; 124
 db4:	f0 e0       	ldi	r31, 0x00	; 0
 db6:	80 81       	ld	r24, Z
 db8:	88 7f       	andi	r24, 0xF8	; 248
 dba:	80 83       	st	Z, r24
		Val1 = ADCH;
 dbc:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 dc0:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <Val1>
		caso = 1;
 dc4:	81 e0       	ldi	r24, 0x01	; 1
 dc6:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <caso>
		break;
 dca:	0e c0       	rjmp	.+28     	; 0xde8 <__vector_21+0x54>
		
		case 1:
		ADMUX &= ~((1<<MUX2)|(1<<MUX1)|(1<<MUX0));   //Borrar configuracion actual y poner ADC0
 dcc:	ec e7       	ldi	r30, 0x7C	; 124
 dce:	f0 e0       	ldi	r31, 0x00	; 0
 dd0:	80 81       	ld	r24, Z
 dd2:	88 7f       	andi	r24, 0xF8	; 248
 dd4:	80 83       	st	Z, r24
		ADMUX |= (1<<MUX0);
 dd6:	80 81       	ld	r24, Z
 dd8:	81 60       	ori	r24, 0x01	; 1
 dda:	80 83       	st	Z, r24
		Val2 = ADCH;
 ddc:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 de0:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <Val2>
		caso = 0;
 de4:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <caso>
		break;
	}
	
	ADCSRA |= (1<<ADIF); //Se borra la bandera de interrupción
 de8:	ea e7       	ldi	r30, 0x7A	; 122
 dea:	f0 e0       	ldi	r31, 0x00	; 0
 dec:	80 81       	ld	r24, Z
 dee:	80 61       	ori	r24, 0x10	; 16
 df0:	80 83       	st	Z, r24

}
 df2:	ff 91       	pop	r31
 df4:	ef 91       	pop	r30
 df6:	8f 91       	pop	r24
 df8:	0f 90       	pop	r0
 dfa:	0f be       	out	0x3f, r0	; 63
 dfc:	0f 90       	pop	r0
 dfe:	1f 90       	pop	r1
 e00:	18 95       	reti

00000e02 <__vector_18>:



ISR(USART_RX_vect)
{
 e02:	1f 92       	push	r1
 e04:	0f 92       	push	r0
 e06:	0f b6       	in	r0, 0x3f	; 63
 e08:	0f 92       	push	r0
 e0a:	11 24       	eor	r1, r1
 e0c:	8f 93       	push	r24
	receivedChar = UDR0; // Almacena el carácter recibido
 e0e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 e12:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <__data_end>
	
	while(!(UCSR0A & (1<<UDRE0)));    //Mientras haya caracteres
 e16:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 e1a:	85 ff       	sbrs	r24, 5
 e1c:	fc cf       	rjmp	.-8      	; 0xe16 <__vector_18+0x14>
}
 e1e:	8f 91       	pop	r24
 e20:	0f 90       	pop	r0
 e22:	0f be       	out	0x3f, r0	; 63
 e24:	0f 90       	pop	r0
 e26:	1f 90       	pop	r1
 e28:	18 95       	reti

00000e2a <initUART9600>:
#include "UART.h"

void initUART9600()
{
	//Paso 1: RX y TX como salida
	DDRD &= ~(1<<DDD0);
 e2a:	8a b1       	in	r24, 0x0a	; 10
 e2c:	8e 7f       	andi	r24, 0xFE	; 254
 e2e:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1);
 e30:	8a b1       	in	r24, 0x0a	; 10
 e32:	82 60       	ori	r24, 0x02	; 2
 e34:	8a b9       	out	0x0a, r24	; 10
	
	//Paso 2:Configurar UCSR0A
	UCSR0A = 0;
 e36:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	
	//Paso 3: configurar UCSR0B donde se habilita ISR de recepcion y se habilita RX y TX
	UCSR0B = 0;
 e3a:	e1 ec       	ldi	r30, 0xC1	; 193
 e3c:	f0 e0       	ldi	r31, 0x00	; 0
 e3e:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0) | (1<<RXEN0) | (1<<TXEN0);
 e40:	80 81       	ld	r24, Z
 e42:	88 69       	ori	r24, 0x98	; 152
 e44:	80 83       	st	Z, r24
	
	//Paso 4: Configurar UCSR0C, asincrono, paridad: none, 1 bit stop, data bits de 8 bits
	UCSR0C = 0;
 e46:	e2 ec       	ldi	r30, 0xC2	; 194
 e48:	f0 e0       	ldi	r31, 0x00	; 0
 e4a:	10 82       	st	Z, r1
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 e4c:	80 81       	ld	r24, Z
 e4e:	86 60       	ori	r24, 0x06	; 6
 e50:	80 83       	st	Z, r24
	
	//Paso 5: Configurar velocidad de baudrate a 9600
	UBRR0 = 103;
 e52:	87 e6       	ldi	r24, 0x67	; 103
 e54:	90 e0       	ldi	r25, 0x00	; 0
 e56:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 e5a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 e5e:	08 95       	ret

00000e60 <writeTextUART>:
	
}


//Función de escritura de una cadena de caracteres
void writeTextUART(char * Texto){
 e60:	ac 01       	movw	r20, r24
	uint8_t o;
	for(o = 0; Texto[o]!= '\0'; o++){
 e62:	20 e0       	ldi	r18, 0x00	; 0
 e64:	07 c0       	rjmp	.+14     	; 0xe74 <writeTextUART+0x14>
		while(!(UCSR0A & (1<<UDRE0)));
 e66:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 e6a:	95 ff       	sbrs	r25, 5
 e6c:	fc cf       	rjmp	.-8      	; 0xe66 <writeTextUART+0x6>
		UDR0 = Texto[o];
 e6e:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>


//Función de escritura de una cadena de caracteres
void writeTextUART(char * Texto){
	uint8_t o;
	for(o = 0; Texto[o]!= '\0'; o++){
 e72:	2f 5f       	subi	r18, 0xFF	; 255
 e74:	fa 01       	movw	r30, r20
 e76:	e2 0f       	add	r30, r18
 e78:	f1 1d       	adc	r31, r1
 e7a:	30 81       	ld	r19, Z
 e7c:	31 11       	cpse	r19, r1
 e7e:	f3 cf       	rjmp	.-26     	; 0xe66 <writeTextUART+0x6>
		while(!(UCSR0A & (1<<UDRE0)));
		UDR0 = Texto[o];
	}
}
 e80:	08 95       	ret

00000e82 <writeUART>:


//Funcion de escritura de un caracter
void writeUART(char Caracter)
{
	while(!(UCSR0A & (1<<UDRE0)));  //hasta que la bandera este en 1
 e82:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 e86:	95 ff       	sbrs	r25, 5
 e88:	fc cf       	rjmp	.-8      	; 0xe82 <writeUART>
	UDR0 = Caracter;
 e8a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 e8e:	08 95       	ret

00000e90 <__divmodhi4>:
 e90:	97 fb       	bst	r25, 7
 e92:	07 2e       	mov	r0, r23
 e94:	16 f4       	brtc	.+4      	; 0xe9a <__divmodhi4+0xa>
 e96:	00 94       	com	r0
 e98:	07 d0       	rcall	.+14     	; 0xea8 <__divmodhi4_neg1>
 e9a:	77 fd       	sbrc	r23, 7
 e9c:	09 d0       	rcall	.+18     	; 0xeb0 <__divmodhi4_neg2>
 e9e:	0e 94 62 07 	call	0xec4	; 0xec4 <__udivmodhi4>
 ea2:	07 fc       	sbrc	r0, 7
 ea4:	05 d0       	rcall	.+10     	; 0xeb0 <__divmodhi4_neg2>
 ea6:	3e f4       	brtc	.+14     	; 0xeb6 <__divmodhi4_exit>

00000ea8 <__divmodhi4_neg1>:
 ea8:	90 95       	com	r25
 eaa:	81 95       	neg	r24
 eac:	9f 4f       	sbci	r25, 0xFF	; 255
 eae:	08 95       	ret

00000eb0 <__divmodhi4_neg2>:
 eb0:	70 95       	com	r23
 eb2:	61 95       	neg	r22
 eb4:	7f 4f       	sbci	r23, 0xFF	; 255

00000eb6 <__divmodhi4_exit>:
 eb6:	08 95       	ret

00000eb8 <__tablejump2__>:
 eb8:	ee 0f       	add	r30, r30
 eba:	ff 1f       	adc	r31, r31
 ebc:	05 90       	lpm	r0, Z+
 ebe:	f4 91       	lpm	r31, Z
 ec0:	e0 2d       	mov	r30, r0
 ec2:	09 94       	ijmp

00000ec4 <__udivmodhi4>:
 ec4:	aa 1b       	sub	r26, r26
 ec6:	bb 1b       	sub	r27, r27
 ec8:	51 e1       	ldi	r21, 0x11	; 17
 eca:	07 c0       	rjmp	.+14     	; 0xeda <__udivmodhi4_ep>

00000ecc <__udivmodhi4_loop>:
 ecc:	aa 1f       	adc	r26, r26
 ece:	bb 1f       	adc	r27, r27
 ed0:	a6 17       	cp	r26, r22
 ed2:	b7 07       	cpc	r27, r23
 ed4:	10 f0       	brcs	.+4      	; 0xeda <__udivmodhi4_ep>
 ed6:	a6 1b       	sub	r26, r22
 ed8:	b7 0b       	sbc	r27, r23

00000eda <__udivmodhi4_ep>:
 eda:	88 1f       	adc	r24, r24
 edc:	99 1f       	adc	r25, r25
 ede:	5a 95       	dec	r21
 ee0:	a9 f7       	brne	.-22     	; 0xecc <__udivmodhi4_loop>
 ee2:	80 95       	com	r24
 ee4:	90 95       	com	r25
 ee6:	bc 01       	movw	r22, r24
 ee8:	cd 01       	movw	r24, r26
 eea:	08 95       	ret

00000eec <_exit>:
 eec:	f8 94       	cli

00000eee <__stop_program>:
 eee:	ff cf       	rjmp	.-2      	; 0xeee <__stop_program>
